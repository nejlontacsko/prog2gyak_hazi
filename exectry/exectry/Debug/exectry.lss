
exectry.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000134  00800100  00000e86  00000efa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e86  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  0000102e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  000010c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001aa8  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c4c  00000000  00000000  00002c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a62  00000000  00000000  000038ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000224  00000000  00000000  00004310  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000648  00000000  00000000  00004534  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cc6  00000000  00000000  00004b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00005842  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  7c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  80:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  84:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  88:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e8       	ldi	r30, 0x86	; 134
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	a4 33       	cpi	r26, 0x34	; 52
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>
  ae:	0e 94 c4 03 	call	0x788	; 0x788 <main>
  b2:	0c 94 41 07 	jmp	0xe82	; 0xe82 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <_setDataDirection>:
	//TODO
	return 0;
}

void wait4BF()
{
  ba:	89 2b       	or	r24, r25
  bc:	21 f0       	breq	.+8      	; 0xc6 <_setDataDirection+0xc>
  be:	82 b1       	in	r24, 0x02	; 2
  c0:	8f 70       	andi	r24, 0x0F	; 15
  c2:	82 b9       	out	0x02, r24	; 2
  c4:	08 95       	ret
  c6:	82 b1       	in	r24, 0x02	; 2
  c8:	80 6f       	ori	r24, 0xF0	; 240
  ca:	82 b9       	out	0x02, r24	; 2
  cc:	08 95       	ret

000000ce <_writeRegister>:
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	8c 01       	movw	r16, r24
  d6:	c6 2f       	mov	r28, r22
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 5d 00 	call	0xba	; 0xba <_setDataDirection>
  e0:	01 2b       	or	r16, r17
  e2:	29 f0       	breq	.+10     	; 0xee <_writeRegister+0x20>
  e4:	e2 e6       	ldi	r30, 0x62	; 98
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	80 83       	st	Z, r24
  ee:	e2 e6       	ldi	r30, 0x62	; 98
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	8b 7f       	andi	r24, 0xFB	; 251
  f6:	80 83       	st	Z, r24
  f8:	8f ec       	ldi	r24, 0xCF	; 207
  fa:	97 e0       	ldi	r25, 0x07	; 7
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <_writeRegister+0x2e>
 100:	00 c0       	rjmp	.+0      	; 0x102 <_writeRegister+0x34>
 102:	00 00       	nop
 104:	80 81       	ld	r24, Z
 106:	88 60       	ori	r24, 0x08	; 8
 108:	80 83       	st	Z, r24
 10a:	8f ec       	ldi	r24, 0xCF	; 207
 10c:	97 e0       	ldi	r25, 0x07	; 7
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <_writeRegister+0x40>
 112:	00 c0       	rjmp	.+0      	; 0x114 <_writeRegister+0x46>
 114:	00 00       	nop
 116:	83 b1       	in	r24, 0x03	; 3
 118:	90 e1       	ldi	r25, 0x10	; 16
 11a:	c9 9f       	mul	r28, r25
 11c:	b0 01       	movw	r22, r0
 11e:	11 24       	eor	r1, r1
 120:	68 2b       	or	r22, r24
 122:	63 b9       	out	0x03, r22	; 3
 124:	8f ec       	ldi	r24, 0xCF	; 207
 126:	97 e0       	ldi	r25, 0x07	; 7
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <_writeRegister+0x5a>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <_writeRegister+0x60>
 12e:	00 00       	nop
 130:	80 81       	ld	r24, Z
 132:	81 7f       	andi	r24, 0xF1	; 241
 134:	80 83       	st	Z, r24
 136:	8f ec       	ldi	r24, 0xCF	; 207
 138:	97 e0       	ldi	r25, 0x07	; 7
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <_writeRegister+0x6c>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <_writeRegister+0x72>
 140:	00 00       	nop
 142:	83 b1       	in	r24, 0x03	; 3
 144:	8f 70       	andi	r24, 0x0F	; 15
 146:	83 b9       	out	0x03, r24	; 3
 148:	8f ec       	ldi	r24, 0xCF	; 207
 14a:	97 e0       	ldi	r25, 0x07	; 7
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <_writeRegister+0x7e>
 150:	00 c0       	rjmp	.+0      	; 0x152 <_writeRegister+0x84>
 152:	00 00       	nop
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	08 95       	ret

0000015c <lcdSendCmd>:
	//TODO
}

void lcdSendCmd(uint8_t cmd)
{
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
	_writeRegister(LCD_CTRL_REGISTER, (cmd & 0xf0) >> 4);
 160:	68 2f       	mov	r22, r24
 162:	62 95       	swap	r22
 164:	6f 70       	andi	r22, 0x0F	; 15
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 67 00 	call	0xce	; 0xce <_writeRegister>
	_writeRegister(LCD_CTRL_REGISTER, cmd & 0x0f);
 16e:	6c 2f       	mov	r22, r28
 170:	6f 70       	andi	r22, 0x0F	; 15
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 67 00 	call	0xce	; 0xce <_writeRegister>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	8f ec       	ldi	r24, 0xCF	; 207
 17c:	97 e0       	ldi	r25, 0x07	; 7
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcdSendCmd+0x22>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcdSendCmd+0x28>
 184:	00 00       	nop
	_delay_ms(1);
}
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <lcdSendByte>:

void lcdSendByte(uint8_t data)
{
 18a:	cf 93       	push	r28
 18c:	c8 2f       	mov	r28, r24
	_writeRegister(LCD_DATA_REGISTER, (data & 0xf0) >> 4);
 18e:	68 2f       	mov	r22, r24
 190:	62 95       	swap	r22
 192:	6f 70       	andi	r22, 0x0F	; 15
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 67 00 	call	0xce	; 0xce <_writeRegister>
	_writeRegister(LCD_DATA_REGISTER, data & 0x0f);
 19c:	6c 2f       	mov	r22, r28
 19e:	6f 70       	andi	r22, 0x0F	; 15
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 67 00 	call	0xce	; 0xce <_writeRegister>
 1a8:	8f ec       	ldi	r24, 0xCF	; 207
 1aa:	97 e0       	ldi	r25, 0x07	; 7
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcdSendByte+0x22>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcdSendByte+0x28>
 1b2:	00 00       	nop
	_delay_ms(1);
}
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <lcdCreateChar>:
	lcdPrintHun("     T-Bird     ", "    firmware    ", "  verzió v1.0", ">> Betöltés...");
	_delay_ms(200);
}

void lcdCreateChar(uint8_t location, char charmap[])
{
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	8b 01       	movw	r16, r22
	lcdSendCmd(LCD_CMD_CGRAMAD | (location << 3));
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	80 64       	ori	r24, 0x40	; 64
 1d2:	0e 94 ae 00 	call	0x15c	; 0x15c <lcdSendCmd>
	for (int i = 0; i < 8; i++)
 1d6:	c0 e0       	ldi	r28, 0x00	; 0
 1d8:	d0 e0       	ldi	r29, 0x00	; 0
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <lcdCreateChar+0x32>
		lcdSendByte(charmap[i]);
 1dc:	f8 01       	movw	r30, r16
 1de:	ec 0f       	add	r30, r28
 1e0:	fd 1f       	adc	r31, r29
 1e2:	80 81       	ld	r24, Z
 1e4:	0e 94 c5 00 	call	0x18a	; 0x18a <lcdSendByte>
}

void lcdCreateChar(uint8_t location, char charmap[])
{
	lcdSendCmd(LCD_CMD_CGRAMAD | (location << 3));
	for (int i = 0; i < 8; i++)
 1e8:	21 96       	adiw	r28, 0x01	; 1
 1ea:	c8 30       	cpi	r28, 0x08	; 8
 1ec:	d1 05       	cpc	r29, r1
 1ee:	b4 f3       	brlt	.-20     	; 0x1dc <lcdCreateChar+0x24>
		lcdSendByte(charmap[i]);
}
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	08 95       	ret

000001fa <lcdPrint>:

void lcdPrint(const char* str, int row)
{
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	8c 01       	movw	r16, r24
 204:	eb 01       	movw	r28, r22
	lcdSendCmd(LCD_CMD_RETHOME);
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	0e 94 ae 00 	call	0x15c	; 0x15c <lcdSendCmd>
	switch (row)
 20c:	c1 30       	cpi	r28, 0x01	; 1
 20e:	d1 05       	cpc	r29, r1
 210:	71 f0       	breq	.+28     	; 0x22e <lcdPrint+0x34>
 212:	1c f4       	brge	.+6      	; 0x21a <lcdPrint+0x20>
 214:	cd 2b       	or	r28, r29
 216:	39 f0       	breq	.+14     	; 0x226 <lcdPrint+0x2c>
 218:	0d c0       	rjmp	.+26     	; 0x234 <lcdPrint+0x3a>
 21a:	c2 30       	cpi	r28, 0x02	; 2
 21c:	d1 05       	cpc	r29, r1
 21e:	69 f0       	breq	.+26     	; 0x23a <lcdPrint+0x40>
 220:	23 97       	sbiw	r28, 0x03	; 3
 222:	79 f0       	breq	.+30     	; 0x242 <lcdPrint+0x48>
 224:	07 c0       	rjmp	.+14     	; 0x234 <lcdPrint+0x3a>
	{
		case 0:	lcdSendCmd(LCD_CMD_DDRAMAD + 0x00); break;
 226:	80 e8       	ldi	r24, 0x80	; 128
 228:	0e 94 ae 00 	call	0x15c	; 0x15c <lcdSendCmd>
 22c:	03 c0       	rjmp	.+6      	; 0x234 <lcdPrint+0x3a>
		case 1:	lcdSendCmd(LCD_CMD_DDRAMAD + 0x28); break;
 22e:	88 ea       	ldi	r24, 0xA8	; 168
 230:	0e 94 ae 00 	call	0x15c	; 0x15c <lcdSendCmd>
	for (int i = 0; i < 8; i++)
		lcdSendByte(charmap[i]);
}

void lcdPrint(const char* str, int row)
{
 234:	c0 e0       	ldi	r28, 0x00	; 0
 236:	d0 e0       	ldi	r29, 0x00	; 0
 238:	16 c0       	rjmp	.+44     	; 0x266 <lcdPrint+0x6c>
	lcdSendCmd(LCD_CMD_RETHOME);
	switch (row)
	{
		case 0:	lcdSendCmd(LCD_CMD_DDRAMAD + 0x00); break;
		case 1:	lcdSendCmd(LCD_CMD_DDRAMAD + 0x28); break;
		case 2:	lcdSendCmd(LCD_CMD_DDRAMAD + 0x10); break;
 23a:	80 e9       	ldi	r24, 0x90	; 144
 23c:	0e 94 ae 00 	call	0x15c	; 0x15c <lcdSendCmd>
 240:	f9 cf       	rjmp	.-14     	; 0x234 <lcdPrint+0x3a>
		case 3:	lcdSendCmd(LCD_CMD_DDRAMAD + 0x50); break;
 242:	80 ed       	ldi	r24, 0xD0	; 208
 244:	0e 94 ae 00 	call	0x15c	; 0x15c <lcdSendCmd>
 248:	f5 cf       	rjmp	.-22     	; 0x234 <lcdPrint+0x3a>
	}

	int i = 0;
	while (i < 16 && *str)
	{
		lcdSendByte(*str);
 24a:	0e 94 c5 00 	call	0x18a	; 0x18a <lcdSendByte>
		str++;
 24e:	0f 5f       	subi	r16, 0xFF	; 255
 250:	1f 4f       	sbci	r17, 0xFF	; 255
		i++;
 252:	21 96       	adiw	r28, 0x01	; 1
 254:	2f eb       	ldi	r18, 0xBF	; 191
 256:	8a ed       	ldi	r24, 0xDA	; 218
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	21 50       	subi	r18, 0x01	; 1
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <lcdPrint+0x60>
 262:	00 c0       	rjmp	.+0      	; 0x264 <lcdPrint+0x6a>
 264:	00 00       	nop
		case 2:	lcdSendCmd(LCD_CMD_DDRAMAD + 0x10); break;
		case 3:	lcdSendCmd(LCD_CMD_DDRAMAD + 0x50); break;
	}

	int i = 0;
	while (i < 16 && *str)
 266:	c0 31       	cpi	r28, 0x10	; 16
 268:	d1 05       	cpc	r29, r1
 26a:	24 f4       	brge	.+8      	; 0x274 <lcdPrint+0x7a>
 26c:	f8 01       	movw	r30, r16
 26e:	80 81       	ld	r24, Z
 270:	81 11       	cpse	r24, r1
 272:	eb cf       	rjmp	.-42     	; 0x24a <lcdPrint+0x50>
		lcdSendByte(*str);
		str++;
		i++;
		_delay_ms(35);
	}
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	08 95       	ret

0000027e <lcdPrintHun>:

int lcdPrintHun(const char* line0, const char* line1, const char* line2, const char* line3)
{
 27e:	6f 92       	push	r6
 280:	7f 92       	push	r7
 282:	8f 92       	push	r8
 284:	9f 92       	push	r9
 286:	af 92       	push	r10
 288:	bf 92       	push	r11
 28a:	cf 92       	push	r12
 28c:	df 92       	push	r13
 28e:	ef 92       	push	r14
 290:	ff 92       	push	r15
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	c6 5b       	subi	r28, 0xB6	; 182
 2a0:	d1 09       	sbc	r29, r1
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	f8 94       	cli
 2a6:	de bf       	out	0x3e, r29	; 62
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	cd bf       	out	0x3d, r28	; 61
 2ac:	18 2f       	mov	r17, r24
 2ae:	09 2f       	mov	r16, r25
 2b0:	76 2e       	mov	r7, r22
 2b2:	67 2e       	mov	r6, r23
 2b4:	94 2e       	mov	r9, r20
 2b6:	85 2e       	mov	r8, r21
 2b8:	b2 2e       	mov	r11, r18
 2ba:	a3 2e       	mov	r10, r19
	char hunLetters[19] = {
 2bc:	83 e1       	ldi	r24, 0x13	; 19
 2be:	ea e7       	ldi	r30, 0x7A	; 122
 2c0:	f1 e0       	ldi	r31, 0x01	; 1
 2c2:	de 01       	movw	r26, r28
 2c4:	11 96       	adiw	r26, 0x01	; 1
 2c6:	01 90       	ld	r0, Z+
 2c8:	0d 92       	st	X+, r0
 2ca:	8a 95       	dec	r24
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <lcdPrintHun+0x48>
		0xe1, 0xe9, 0xed,	//á, é, í,
		0xf3, 0xf5, 0xf6,	//ó, õ, ö,
		0xfa, 0xfb, 0xfc,   //ú, û, ü
		0x00};
	
	char* replacement[19] = {
 2ce:	86 e2       	ldi	r24, 0x26	; 38
 2d0:	ed e8       	ldi	r30, 0x8D	; 141
 2d2:	f1 e0       	ldi	r31, 0x01	; 1
 2d4:	de 01       	movw	r26, r28
 2d6:	54 96       	adiw	r26, 0x14	; 20
 2d8:	01 90       	ld	r0, Z+
 2da:	0d 92       	st	X+, r0
 2dc:	8a 95       	dec	r24
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <lcdPrintHun+0x5a>
		lowerAA, lowerEE, lowerII,
		lowerOO, lowerDO,    NULL,
		lowerUU, lowerDU,    NULL,
	0x00};
	
	int len[5] = {
 2e0:	1b ae       	std	Y+59, r1	; 0x3b
 2e2:	1a ae       	std	Y+58, r1	; 0x3a
		0,
		strlen(line0),
 2e4:	a1 2f       	mov	r26, r17
 2e6:	b9 2f       	mov	r27, r25
 2e8:	fd 01       	movw	r30, r26
 2ea:	01 90       	ld	r0, Z+
 2ec:	00 20       	and	r0, r0
 2ee:	e9 f7       	brne	.-6      	; 0x2ea <lcdPrintHun+0x6c>
 2f0:	31 97       	sbiw	r30, 0x01	; 1
 2f2:	ea 1b       	sub	r30, r26
 2f4:	fb 0b       	sbc	r31, r27
		lowerAA, lowerEE, lowerII,
		lowerOO, lowerDO,    NULL,
		lowerUU, lowerDU,    NULL,
	0x00};
	
	int len[5] = {
 2f6:	fd af       	std	Y+61, r31	; 0x3d
 2f8:	ec af       	std	Y+60, r30	; 0x3c
		0,
		strlen(line0),
		strlen(line1),
 2fa:	a6 2f       	mov	r26, r22
 2fc:	b7 2f       	mov	r27, r23
 2fe:	fd 01       	movw	r30, r26
 300:	01 90       	ld	r0, Z+
 302:	00 20       	and	r0, r0
 304:	e9 f7       	brne	.-6      	; 0x300 <lcdPrintHun+0x82>
 306:	31 97       	sbiw	r30, 0x01	; 1
 308:	ea 1b       	sub	r30, r26
 30a:	fb 0b       	sbc	r31, r27
		lowerAA, lowerEE, lowerII,
		lowerOO, lowerDO,    NULL,
		lowerUU, lowerDU,    NULL,
	0x00};
	
	int len[5] = {
 30c:	ff af       	std	Y+63, r31	; 0x3f
 30e:	ee af       	std	Y+62, r30	; 0x3e
		0,
		strlen(line0),
		strlen(line1),
		strlen(line2),
 310:	a4 2f       	mov	r26, r20
 312:	b5 2f       	mov	r27, r21
 314:	fd 01       	movw	r30, r26
 316:	01 90       	ld	r0, Z+
 318:	00 20       	and	r0, r0
 31a:	e9 f7       	brne	.-6      	; 0x316 <lcdPrintHun+0x98>
 31c:	31 97       	sbiw	r30, 0x01	; 1
 31e:	ea 1b       	sub	r30, r26
 320:	fb 0b       	sbc	r31, r27
		lowerAA, lowerEE, lowerII,
		lowerOO, lowerDO,    NULL,
		lowerUU, lowerDU,    NULL,
	0x00};
	
	int len[5] = {
 322:	22 96       	adiw	r28, 0x02	; 2
 324:	ff af       	std	Y+63, r31	; 0x3f
 326:	ee af       	std	Y+62, r30	; 0x3e
 328:	22 97       	sbiw	r28, 0x02	; 2
		0,
		strlen(line0),
		strlen(line1),
		strlen(line2),
		strlen(line3)
 32a:	a2 2f       	mov	r26, r18
 32c:	b3 2f       	mov	r27, r19
 32e:	fd 01       	movw	r30, r26
 330:	01 90       	ld	r0, Z+
 332:	00 20       	and	r0, r0
 334:	e9 f7       	brne	.-6      	; 0x330 <lcdPrintHun+0xb2>
 336:	31 97       	sbiw	r30, 0x01	; 1
 338:	ea 1b       	sub	r30, r26
 33a:	fb 0b       	sbc	r31, r27
		lowerAA, lowerEE, lowerII,
		lowerOO, lowerDO,    NULL,
		lowerUU, lowerDU,    NULL,
	0x00};
	
	int len[5] = {
 33c:	24 96       	adiw	r28, 0x04	; 4
 33e:	ff af       	std	Y+63, r31	; 0x3f
 340:	ee af       	std	Y+62, r30	; 0x3e
 342:	24 97       	sbiw	r28, 0x04	; 4
		strlen(line3)
	};
	
	int fcnt = 0, offset = 0, found[8];
	char concat[65], subbuff[17];
	memset(found, -1, 9 * sizeof(int));
 344:	42 e1       	ldi	r20, 0x12	; 18
 346:	50 e0       	ldi	r21, 0x00	; 0
 348:	6f ef       	ldi	r22, 0xFF	; 255
 34a:	7f ef       	ldi	r23, 0xFF	; 255
 34c:	ce 01       	movw	r24, r28
 34e:	8c 5b       	subi	r24, 0xBC	; 188
 350:	9f 4f       	sbci	r25, 0xFF	; 255
 352:	0e 94 45 04 	call	0x88a	; 0x88a <memset>
	memset(concat, 0, 65);
 356:	6e 01       	movw	r12, r28
 358:	84 e5       	ldi	r24, 0x54	; 84
 35a:	c8 0e       	add	r12, r24
 35c:	d1 1c       	adc	r13, r1
 35e:	81 e4       	ldi	r24, 0x41	; 65
 360:	f6 01       	movw	r30, r12
 362:	11 92       	st	Z+, r1
 364:	8a 95       	dec	r24
 366:	e9 f7       	brne	.-6      	; 0x362 <lcdPrintHun+0xe4>
	
	char bufsrtcatl[17];
	STRCATL(concat, bufsrtcatl, line0, 16);
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	0f 2e       	mov	r0, r31
 36e:	f3 eb       	ldi	r31, 0xB3	; 179
 370:	ef 2e       	mov	r14, r31
 372:	f1 e0       	ldi	r31, 0x01	; 1
 374:	ff 2e       	mov	r15, r31
 376:	f0 2d       	mov	r31, r0
 378:	ff 92       	push	r15
 37a:	ef 92       	push	r14
 37c:	8e 01       	movw	r16, r28
 37e:	0a 55       	subi	r16, 0x5A	; 90
 380:	1f 4f       	sbci	r17, 0xFF	; 255
 382:	1f 93       	push	r17
 384:	0f 93       	push	r16
 386:	0e 94 57 04 	call	0x8ae	; 0x8ae <sprintf>
 38a:	b8 01       	movw	r22, r16
 38c:	c6 01       	movw	r24, r12
 38e:	0e 94 4c 04 	call	0x898	; 0x898 <strcat>
	STRCATL(concat, bufsrtcatl, line1, 16);
 392:	6f 92       	push	r6
 394:	7f 92       	push	r7
 396:	ff 92       	push	r15
 398:	ef 92       	push	r14
 39a:	1f 93       	push	r17
 39c:	0f 93       	push	r16
 39e:	0e 94 57 04 	call	0x8ae	; 0x8ae <sprintf>
 3a2:	b8 01       	movw	r22, r16
 3a4:	c6 01       	movw	r24, r12
 3a6:	0e 94 4c 04 	call	0x898	; 0x898 <strcat>
	STRCATL(concat, bufsrtcatl, line2, 16);
 3aa:	8f 92       	push	r8
 3ac:	9f 92       	push	r9
 3ae:	ff 92       	push	r15
 3b0:	ef 92       	push	r14
 3b2:	1f 93       	push	r17
 3b4:	0f 93       	push	r16
 3b6:	0e 94 57 04 	call	0x8ae	; 0x8ae <sprintf>
 3ba:	b8 01       	movw	r22, r16
 3bc:	c6 01       	movw	r24, r12
 3be:	0e 94 4c 04 	call	0x898	; 0x898 <strcat>
	STRCATL(concat, bufsrtcatl, line3, 16);
 3c2:	af 92       	push	r10
 3c4:	bf 92       	push	r11
 3c6:	ff 92       	push	r15
 3c8:	ef 92       	push	r14
 3ca:	1f 93       	push	r17
 3cc:	0f 93       	push	r16
 3ce:	0e 94 57 04 	call	0x8ae	; 0x8ae <sprintf>
 3d2:	b8 01       	movw	r22, r16
 3d4:	c6 01       	movw	r24, r12
 3d6:	0e 94 4c 04 	call	0x898	; 0x898 <strcat>
	
	lcdSendCmd(LCD_CMD_RETHOME);
 3da:	82 e0       	ldi	r24, 0x02	; 2
 3dc:	0e 94 ae 00 	call	0x15c	; 0x15c <lcdSendCmd>
	lcdSendCmd(LCD_CMD_DDRAMAD + 0x28);
 3e0:	88 ea       	ldi	r24, 0xA8	; 168
 3e2:	0e 94 ae 00 	call	0x15c	; 0x15c <lcdSendCmd>
	
	for (int i = 0; concat[i] != 0; i++)
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	e1 2c       	mov	r14, r1
 3f2:	f1 2c       	mov	r15, r1
		strlen(line1),
		strlen(line2),
		strlen(line3)
	};
	
	int fcnt = 0, offset = 0, found[8];
 3f4:	00 e0       	ldi	r16, 0x00	; 0
 3f6:	10 e0       	ldi	r17, 0x00	; 0
	STRCATL(concat, bufsrtcatl, line3, 16);
	
	lcdSendCmd(LCD_CMD_RETHOME);
	lcdSendCmd(LCD_CMD_DDRAMAD + 0x28);
	
	for (int i = 0; concat[i] != 0; i++)
 3f8:	68 c0       	rjmp	.+208    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
	{
		int index = ((concat[i] > 0x7f) ? _findChar(hunLetters, concat[i]) : -1);
 3fa:	66 23       	and	r22, r22
 3fc:	34 f4       	brge	.+12     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3fe:	ce 01       	movw	r24, r28
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	0e 94 17 04 	call	0x82e	; 0x82e <_findChar>
 406:	6c 01       	movw	r12, r24
 408:	03 c0       	rjmp	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40a:	cc 24       	eor	r12, r12
 40c:	ca 94       	dec	r12
 40e:	dc 2c       	mov	r13, r12
		if (index > -1)
 410:	dd 20       	and	r13, r13
 412:	0c f4       	brge	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 414:	57 c0       	rjmp	.+174    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
		{
			if (replacement[index] != NULL)
 416:	f6 01       	movw	r30, r12
 418:	ee 0f       	add	r30, r30
 41a:	ff 1f       	adc	r31, r31
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	8c 0f       	add	r24, r28
 422:	9d 1f       	adc	r25, r29
 424:	e8 0f       	add	r30, r24
 426:	f9 1f       	adc	r31, r25
 428:	83 89       	ldd	r24, Z+19	; 0x13
 42a:	94 89       	ldd	r25, Z+20	; 0x14
 42c:	89 2b       	or	r24, r25
 42e:	89 f1       	breq	.+98     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
			{
				int seen = _findInt(found, index, 8);
 430:	48 e0       	ldi	r20, 0x08	; 8
 432:	50 e0       	ldi	r21, 0x00	; 0
 434:	b6 01       	movw	r22, r12
 436:	ce 01       	movw	r24, r28
 438:	8c 5b       	subi	r24, 0xBC	; 188
 43a:	9f 4f       	sbci	r25, 0xFF	; 255
 43c:	0e 94 27 04 	call	0x84e	; 0x84e <_findInt>
				if (seen > -1)
 440:	99 23       	and	r25, r25
 442:	4c f0       	brlt	.+18     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
					concat[i] = seen + 8;
 444:	e4 e5       	ldi	r30, 0x54	; 84
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	ec 0f       	add	r30, r28
 44a:	fd 1f       	adc	r31, r29
 44c:	ee 0d       	add	r30, r14
 44e:	ff 1d       	adc	r31, r15
 450:	88 5f       	subi	r24, 0xF8	; 248
 452:	80 83       	st	Z, r24
 454:	37 c0       	rjmp	.+110    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
				else
				{
					if (fcnt < limit)
 456:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <limit>
 45a:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <limit+0x1>
 45e:	08 17       	cp	r16, r24
 460:	19 07       	cpc	r17, r25
 462:	84 f5       	brge	.+96     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
					{
						found[fcnt] = index;
 464:	f8 01       	movw	r30, r16
 466:	ee 0f       	add	r30, r30
 468:	ff 1f       	adc	r31, r31
 46a:	84 e4       	ldi	r24, 0x44	; 68
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	8c 0f       	add	r24, r28
 470:	9d 1f       	adc	r25, r29
 472:	e8 0f       	add	r30, r24
 474:	f9 1f       	adc	r31, r25
 476:	d1 82       	std	Z+1, r13	; 0x01
 478:	c0 82       	st	Z, r12
						concat[i] = fcnt + 8;
 47a:	e4 e5       	ldi	r30, 0x54	; 84
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	ec 0f       	add	r30, r28
 480:	fd 1f       	adc	r31, r29
 482:	ee 0d       	add	r30, r14
 484:	ff 1d       	adc	r31, r15
 486:	88 e0       	ldi	r24, 0x08	; 8
 488:	80 0f       	add	r24, r16
 48a:	80 83       	st	Z, r24
						fcnt++;
 48c:	0f 5f       	subi	r16, 0xFF	; 255
 48e:	1f 4f       	sbci	r17, 0xFF	; 255
 490:	19 c0       	rjmp	.+50     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
					}
				}
			}
			else
			{
				if (index == 5 || index == 14)
 492:	95 e0       	ldi	r25, 0x05	; 5
 494:	c9 16       	cp	r12, r25
 496:	d1 04       	cpc	r13, r1
 498:	21 f0       	breq	.+8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 49a:	ee e0       	ldi	r30, 0x0E	; 14
 49c:	ce 16       	cp	r12, r30
 49e:	d1 04       	cpc	r13, r1
 4a0:	49 f4       	brne	.+18     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
					concat[i] = 0xef;
 4a2:	e4 e5       	ldi	r30, 0x54	; 84
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	ec 0f       	add	r30, r28
 4a8:	fd 1f       	adc	r31, r29
 4aa:	ee 0d       	add	r30, r14
 4ac:	ff 1d       	adc	r31, r15
 4ae:	8f ee       	ldi	r24, 0xEF	; 239
 4b0:	80 83       	st	Z, r24
 4b2:	08 c0       	rjmp	.+16     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
				else
					concat[i] = 0xf5;
 4b4:	e4 e5       	ldi	r30, 0x54	; 84
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	ec 0f       	add	r30, r28
 4ba:	fd 1f       	adc	r31, r29
 4bc:	ee 0d       	add	r30, r14
 4be:	ff 1d       	adc	r31, r15
 4c0:	85 ef       	ldi	r24, 0xF5	; 245
 4c2:	80 83       	st	Z, r24
	STRCATL(concat, bufsrtcatl, line3, 16);
	
	lcdSendCmd(LCD_CMD_RETHOME);
	lcdSendCmd(LCD_CMD_DDRAMAD + 0x28);
	
	for (int i = 0; concat[i] != 0; i++)
 4c4:	ff ef       	ldi	r31, 0xFF	; 255
 4c6:	ef 1a       	sub	r14, r31
 4c8:	ff 0a       	sbc	r15, r31
 4ca:	e4 e5       	ldi	r30, 0x54	; 84
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	ec 0f       	add	r30, r28
 4d0:	fd 1f       	adc	r31, r29
 4d2:	ee 0d       	add	r30, r14
 4d4:	ff 1d       	adc	r31, r15
 4d6:	60 81       	ld	r22, Z
 4d8:	61 11       	cpse	r22, r1
 4da:	8f cf       	rjmp	.-226    	; 0x3fa <lcdPrintHun+0x17c>
 4dc:	e1 2c       	mov	r14, r1
 4de:	f1 2c       	mov	r15, r1
 4e0:	1c c0       	rjmp	.+56     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
			}
		}
	}
		
	for (int i = 0; i < fcnt; i++)
		lcdCreateChar(i, replacement[found[i]]);
 4e2:	f7 01       	movw	r30, r14
 4e4:	ee 0f       	add	r30, r30
 4e6:	ff 1f       	adc	r31, r31
 4e8:	84 e4       	ldi	r24, 0x44	; 68
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	8c 0f       	add	r24, r28
 4ee:	9d 1f       	adc	r25, r29
 4f0:	e8 0f       	add	r30, r24
 4f2:	f9 1f       	adc	r31, r25
 4f4:	01 90       	ld	r0, Z+
 4f6:	f0 81       	ld	r31, Z
 4f8:	e0 2d       	mov	r30, r0
 4fa:	ee 0f       	add	r30, r30
 4fc:	ff 1f       	adc	r31, r31
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	8c 0f       	add	r24, r28
 504:	9d 1f       	adc	r25, r29
 506:	e8 0f       	add	r30, r24
 508:	f9 1f       	adc	r31, r25
 50a:	63 89       	ldd	r22, Z+19	; 0x13
 50c:	74 89       	ldd	r23, Z+20	; 0x14
 50e:	8e 2d       	mov	r24, r14
 510:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcdCreateChar>
					concat[i] = 0xf5;
			}
		}
	}
		
	for (int i = 0; i < fcnt; i++)
 514:	9f ef       	ldi	r25, 0xFF	; 255
 516:	e9 1a       	sub	r14, r25
 518:	f9 0a       	sbc	r15, r25
 51a:	e0 16       	cp	r14, r16
 51c:	f1 06       	cpc	r15, r17
 51e:	0c f3       	brlt	.-62     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
		lcdCreateChar(i, replacement[found[i]]);
	lcdSendCmd(LCD_CMD_DDRAMAD);
 520:	80 e8       	ldi	r24, 0x80	; 128
 522:	0e 94 ae 00 	call	0x15c	; 0x15c <lcdSendCmd>
	
	for (int i = 0; i < 4; i++)
 526:	e1 2c       	mov	r14, r1
 528:	f1 2c       	mov	r15, r1
		strlen(line1),
		strlen(line2),
		strlen(line3)
	};
	
	int fcnt = 0, offset = 0, found[8];
 52a:	a1 2c       	mov	r10, r1
 52c:	b1 2c       	mov	r11, r1
		
	for (int i = 0; i < fcnt; i++)
		lcdCreateChar(i, replacement[found[i]]);
	lcdSendCmd(LCD_CMD_DDRAMAD);
	
	for (int i = 0; i < 4; i++)
 52e:	31 c0       	rjmp	.+98     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
	{
		memset(subbuff, 0, 17);
 530:	6e 01       	movw	r12, r28
 532:	e5 e9       	ldi	r30, 0x95	; 149
 534:	ce 0e       	add	r12, r30
 536:	d1 1c       	adc	r13, r1
 538:	81 e1       	ldi	r24, 0x11	; 17
 53a:	f6 01       	movw	r30, r12
 53c:	11 92       	st	Z+, r1
 53e:	8a 95       	dec	r24
 540:	e9 f7       	brne	.-6      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
		memcpy(subbuff, &concat[len[i]] + offset, len[i + 1]);
 542:	37 01       	movw	r6, r14
 544:	ff ef       	ldi	r31, 0xFF	; 255
 546:	6f 1a       	sub	r6, r31
 548:	7f 0a       	sbc	r7, r31
 54a:	f3 01       	movw	r30, r6
 54c:	ee 0f       	add	r30, r30
 54e:	ff 1f       	adc	r31, r31
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	8c 0f       	add	r24, r28
 556:	9d 1f       	adc	r25, r29
 558:	e8 0f       	add	r30, r24
 55a:	f9 1f       	adc	r31, r25
 55c:	41 ad       	ldd	r20, Z+57	; 0x39
 55e:	52 ad       	ldd	r21, Z+58	; 0x3a
 560:	f7 01       	movw	r30, r14
 562:	ee 0f       	add	r30, r30
 564:	ff 1f       	adc	r31, r31
 566:	e8 0f       	add	r30, r24
 568:	f9 1f       	adc	r31, r25
 56a:	81 ac       	ldd	r8, Z+57	; 0x39
 56c:	92 ac       	ldd	r9, Z+58	; 0x3a
 56e:	64 e5       	ldi	r22, 0x54	; 84
 570:	70 e0       	ldi	r23, 0x00	; 0
 572:	6c 0f       	add	r22, r28
 574:	7d 1f       	adc	r23, r29
 576:	68 0d       	add	r22, r8
 578:	79 1d       	adc	r23, r9
 57a:	6a 0d       	add	r22, r10
 57c:	7b 1d       	adc	r23, r11
 57e:	c6 01       	movw	r24, r12
 580:	0e 94 3c 04 	call	0x878	; 0x878 <memcpy>
		lcdPrint(subbuff, i);
 584:	b7 01       	movw	r22, r14
 586:	c6 01       	movw	r24, r12
 588:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcdPrint>
		offset += len[i];
 58c:	a8 0c       	add	r10, r8
 58e:	b9 1c       	adc	r11, r9
		
	for (int i = 0; i < fcnt; i++)
		lcdCreateChar(i, replacement[found[i]]);
	lcdSendCmd(LCD_CMD_DDRAMAD);
	
	for (int i = 0; i < 4; i++)
 590:	73 01       	movw	r14, r6
 592:	94 e0       	ldi	r25, 0x04	; 4
 594:	e9 16       	cp	r14, r25
 596:	f1 04       	cpc	r15, r1
 598:	5c f2       	brlt	.-106    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
		lcdPrint(subbuff, i);
		offset += len[i];
	}
	
	return fcnt;
}
 59a:	c8 01       	movw	r24, r16
 59c:	ca 54       	subi	r28, 0x4A	; 74
 59e:	df 4f       	sbci	r29, 0xFF	; 255
 5a0:	0f b6       	in	r0, 0x3f	; 63
 5a2:	f8 94       	cli
 5a4:	de bf       	out	0x3e, r29	; 62
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	cd bf       	out	0x3d, r28	; 61
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	1f 91       	pop	r17
 5b0:	0f 91       	pop	r16
 5b2:	ff 90       	pop	r15
 5b4:	ef 90       	pop	r14
 5b6:	df 90       	pop	r13
 5b8:	cf 90       	pop	r12
 5ba:	bf 90       	pop	r11
 5bc:	af 90       	pop	r10
 5be:	9f 90       	pop	r9
 5c0:	8f 90       	pop	r8
 5c2:	7f 90       	pop	r7
 5c4:	6f 90       	pop	r6
 5c6:	08 95       	ret

000005c8 <lcdInit>:
	_delay_ms(1);
}

void lcdInit()
{
	DDRF = LCD_PIN_EN | LCD_PIN_RW | LCD_PIN_RS;
 5c8:	8e e0       	ldi	r24, 0x0E	; 14
 5ca:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f0061>
 5ce:	2f ef       	ldi	r18, 0xFF	; 255
 5d0:	89 ef       	ldi	r24, 0xF9	; 249
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	21 50       	subi	r18, 0x01	; 1
 5d6:	80 40       	sbci	r24, 0x00	; 0
 5d8:	90 40       	sbci	r25, 0x00	; 0
 5da:	e1 f7       	brne	.-8      	; 0x5d4 <lcdInit+0xc>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <lcdInit+0x16>
 5de:	00 00       	nop
	
	_delay_ms(40);
	
	_writeRegister(LCD_CTRL_REGISTER, 3);
 5e0:	63 e0       	ldi	r22, 0x03	; 3
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 67 00 	call	0xce	; 0xce <_writeRegister>
 5ea:	8f e0       	ldi	r24, 0x0F	; 15
 5ec:	97 e2       	ldi	r25, 0x27	; 39
 5ee:	01 97       	sbiw	r24, 0x01	; 1
 5f0:	f1 f7       	brne	.-4      	; 0x5ee <lcdInit+0x26>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <lcdInit+0x2c>
 5f4:	00 00       	nop
	_delay_ms(5);
	_writeRegister(LCD_CTRL_REGISTER, 3);
 5f6:	63 e0       	ldi	r22, 0x03	; 3
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0e 94 67 00 	call	0xce	; 0xce <_writeRegister>
 600:	8f ec       	ldi	r24, 0xCF	; 207
 602:	97 e0       	ldi	r25, 0x07	; 7
 604:	01 97       	sbiw	r24, 0x01	; 1
 606:	f1 f7       	brne	.-4      	; 0x604 <lcdInit+0x3c>
 608:	00 c0       	rjmp	.+0      	; 0x60a <lcdInit+0x42>
 60a:	00 00       	nop
	_delay_ms(1);
	_writeRegister(LCD_CTRL_REGISTER, 3);
 60c:	63 e0       	ldi	r22, 0x03	; 3
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 67 00 	call	0xce	; 0xce <_writeRegister>
 616:	8f ec       	ldi	r24, 0xCF	; 207
 618:	97 e0       	ldi	r25, 0x07	; 7
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	f1 f7       	brne	.-4      	; 0x61a <lcdInit+0x52>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <lcdInit+0x58>
 620:	00 00       	nop
	_delay_ms(1);
	_writeRegister(LCD_CTRL_REGISTER, 2);
 622:	62 e0       	ldi	r22, 0x02	; 2
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 67 00 	call	0xce	; 0xce <_writeRegister>
	
	lcdSendCmd(LCD_CMD_FUNCSET | 8);
 62c:	88 e2       	ldi	r24, 0x28	; 40
 62e:	0e 94 ae 00 	call	0x15c	; 0x15c <lcdSendCmd>
	lcdSendCmd(LCD_CMD_DSPCTRL | 14);
 632:	8e e0       	ldi	r24, 0x0E	; 14
 634:	0e 94 ae 00 	call	0x15c	; 0x15c <lcdSendCmd>
	lcdSendCmd(LCD_CMD_CLRDISP);
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	0e 94 ae 00 	call	0x15c	; 0x15c <lcdSendCmd>
	lcdSendCmd(LCD_CMD_ENTMODE | 2);
 63e:	86 e0       	ldi	r24, 0x06	; 6
 640:	0e 94 ae 00 	call	0x15c	; 0x15c <lcdSendCmd>
	lcdSendCmd(LCD_CMD_RETHOME);
 644:	82 e0       	ldi	r24, 0x02	; 2
 646:	0e 94 ae 00 	call	0x15c	; 0x15c <lcdSendCmd>
	
	lcdPrintHun("  T-Bird alapú", "ArtNetv4+SLLCPv1", "   csomópont", ">> Betöltés...");
 64a:	29 eb       	ldi	r18, 0xB9	; 185
 64c:	31 e0       	ldi	r19, 0x01	; 1
 64e:	48 ec       	ldi	r20, 0xC8	; 200
 650:	51 e0       	ldi	r21, 0x01	; 1
 652:	65 ed       	ldi	r22, 0xD5	; 213
 654:	71 e0       	ldi	r23, 0x01	; 1
 656:	86 ee       	ldi	r24, 0xE6	; 230
 658:	91 e0       	ldi	r25, 0x01	; 1
 65a:	0e 94 3f 01 	call	0x27e	; 0x27e <lcdPrintHun>
 65e:	9f ef       	ldi	r25, 0xFF	; 255
 660:	24 e3       	ldi	r18, 0x34	; 52
 662:	8c e0       	ldi	r24, 0x0C	; 12
 664:	91 50       	subi	r25, 0x01	; 1
 666:	20 40       	sbci	r18, 0x00	; 0
 668:	80 40       	sbci	r24, 0x00	; 0
 66a:	e1 f7       	brne	.-8      	; 0x664 <lcdInit+0x9c>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <lcdInit+0xa6>
 66e:	00 00       	nop
	_delay_ms(500);
	lcdPrintHun("     T-Bird     ", "    firmware    ", "  verzió v1.0", ">> Betöltés...");
 670:	29 eb       	ldi	r18, 0xB9	; 185
 672:	31 e0       	ldi	r19, 0x01	; 1
 674:	45 ef       	ldi	r20, 0xF5	; 245
 676:	51 e0       	ldi	r21, 0x01	; 1
 678:	63 e0       	ldi	r22, 0x03	; 3
 67a:	72 e0       	ldi	r23, 0x02	; 2
 67c:	84 e1       	ldi	r24, 0x14	; 20
 67e:	92 e0       	ldi	r25, 0x02	; 2
 680:	0e 94 3f 01 	call	0x27e	; 0x27e <lcdPrintHun>
 684:	9f ef       	ldi	r25, 0xFF	; 255
 686:	21 ee       	ldi	r18, 0xE1	; 225
 688:	84 e0       	ldi	r24, 0x04	; 4
 68a:	91 50       	subi	r25, 0x01	; 1
 68c:	20 40       	sbci	r18, 0x00	; 0
 68e:	80 40       	sbci	r24, 0x00	; 0
 690:	e1 f7       	brne	.-8      	; 0x68a <lcdInit+0xc2>
 692:	00 c0       	rjmp	.+0      	; 0x694 <lcdInit+0xcc>
 694:	00 00       	nop
 696:	08 95       	ret

00000698 <lcdGetLimit>:
}

int lcdGetLimit()
{
	return limit;
}
 698:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <limit>
 69c:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <limit+0x1>
 6a0:	08 95       	ret

000006a2 <lcdSetLimit>:

void lcdSetLimit(int l)
{
	limit = l;
 6a2:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <limit+0x1>
 6a6:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <limit>
 6aa:	08 95       	ret

000006ac <led>:
#include "leds.h"

void led(int id, int val)
{
	if (val)
 6ac:	67 2b       	or	r22, r23
 6ae:	99 f0       	breq	.+38     	; 0x6d6 <led+0x2a>
		if (id & 0xf0)
 6b0:	9c 01       	movw	r18, r24
 6b2:	20 7f       	andi	r18, 0xF0	; 240
 6b4:	33 27       	eor	r19, r19
 6b6:	23 2b       	or	r18, r19
 6b8:	21 f0       	breq	.+8      	; 0x6c2 <led+0x16>
			PORTD |= id;
 6ba:	92 b3       	in	r25, 0x12	; 18
 6bc:	89 2b       	or	r24, r25
 6be:	82 bb       	out	0x12, r24	; 18
 6c0:	08 95       	ret
		else
			PORTB |= id << 4;
 6c2:	28 b3       	in	r18, 0x18	; 24
 6c4:	82 95       	swap	r24
 6c6:	92 95       	swap	r25
 6c8:	90 7f       	andi	r25, 0xF0	; 240
 6ca:	98 27       	eor	r25, r24
 6cc:	80 7f       	andi	r24, 0xF0	; 240
 6ce:	98 27       	eor	r25, r24
 6d0:	82 2b       	or	r24, r18
 6d2:	88 bb       	out	0x18, r24	; 24
 6d4:	08 95       	ret
	else
		if (id & 0xf0)
 6d6:	9c 01       	movw	r18, r24
 6d8:	20 7f       	andi	r18, 0xF0	; 240
 6da:	33 27       	eor	r19, r19
 6dc:	23 2b       	or	r18, r19
 6de:	29 f0       	breq	.+10     	; 0x6ea <led+0x3e>
			PORTD &= ~id;
 6e0:	92 b3       	in	r25, 0x12	; 18
 6e2:	80 95       	com	r24
 6e4:	89 23       	and	r24, r25
 6e6:	82 bb       	out	0x12, r24	; 18
 6e8:	08 95       	ret
		else
			PORTB &= ~(id << 4);
 6ea:	98 b3       	in	r25, 0x18	; 24
 6ec:	82 95       	swap	r24
 6ee:	80 7f       	andi	r24, 0xF0	; 240
 6f0:	80 95       	com	r24
 6f2:	89 23       	and	r24, r25
 6f4:	88 bb       	out	0x18, r24	; 24
 6f6:	08 95       	ret

000006f8 <ledTest>:
}

void ledTest()
{
 6f8:	cf 93       	push	r28
 6fa:	df 93       	push	r29
	for (int i = 1; i < 256; i <<= 1)
 6fc:	c1 e0       	ldi	r28, 0x01	; 1
 6fe:	d0 e0       	ldi	r29, 0x00	; 0
 700:	1e c0       	rjmp	.+60     	; 0x73e <ledTest+0x46>
	{
		led(i, ON);
 702:	61 e0       	ldi	r22, 0x01	; 1
 704:	70 e0       	ldi	r23, 0x00	; 0
 706:	ce 01       	movw	r24, r28
 708:	0e 94 56 03 	call	0x6ac	; 0x6ac <led>
 70c:	2f ef       	ldi	r18, 0xFF	; 255
 70e:	81 ee       	ldi	r24, 0xE1	; 225
 710:	94 e0       	ldi	r25, 0x04	; 4
 712:	21 50       	subi	r18, 0x01	; 1
 714:	80 40       	sbci	r24, 0x00	; 0
 716:	90 40       	sbci	r25, 0x00	; 0
 718:	e1 f7       	brne	.-8      	; 0x712 <ledTest+0x1a>
 71a:	00 c0       	rjmp	.+0      	; 0x71c <ledTest+0x24>
 71c:	00 00       	nop
		_delay_ms(200);
		led(i, OFF);
 71e:	60 e0       	ldi	r22, 0x00	; 0
 720:	70 e0       	ldi	r23, 0x00	; 0
 722:	ce 01       	movw	r24, r28
 724:	0e 94 56 03 	call	0x6ac	; 0x6ac <led>
 728:	2f e7       	ldi	r18, 0x7F	; 127
 72a:	88 e3       	ldi	r24, 0x38	; 56
 72c:	91 e0       	ldi	r25, 0x01	; 1
 72e:	21 50       	subi	r18, 0x01	; 1
 730:	80 40       	sbci	r24, 0x00	; 0
 732:	90 40       	sbci	r25, 0x00	; 0
 734:	e1 f7       	brne	.-8      	; 0x72e <ledTest+0x36>
 736:	00 c0       	rjmp	.+0      	; 0x738 <ledTest+0x40>
 738:	00 00       	nop
			PORTB &= ~(id << 4);
}

void ledTest()
{
	for (int i = 1; i < 256; i <<= 1)
 73a:	cc 0f       	add	r28, r28
 73c:	dd 1f       	adc	r29, r29
 73e:	cf 3f       	cpi	r28, 0xFF	; 255
 740:	d1 05       	cpc	r29, r1
 742:	f9 f2       	breq	.-66     	; 0x702 <ledTest+0xa>
 744:	f4 f2       	brlt	.-68     	; 0x702 <ledTest+0xa>
		led(i, ON);
		_delay_ms(200);
		led(i, OFF);
		_delay_ms(50);
	}
	PORTD |= 0xf0;
 746:	82 b3       	in	r24, 0x12	; 18
 748:	80 6f       	ori	r24, 0xF0	; 240
 74a:	82 bb       	out	0x12, r24	; 18
	PORTB |= 0xf0;
 74c:	88 b3       	in	r24, 0x18	; 24
 74e:	80 6f       	ori	r24, 0xF0	; 240
 750:	88 bb       	out	0x18, r24	; 24
 752:	2f ef       	ldi	r18, 0xFF	; 255
 754:	81 ee       	ldi	r24, 0xE1	; 225
 756:	94 e0       	ldi	r25, 0x04	; 4
 758:	21 50       	subi	r18, 0x01	; 1
 75a:	80 40       	sbci	r24, 0x00	; 0
 75c:	90 40       	sbci	r25, 0x00	; 0
 75e:	e1 f7       	brne	.-8      	; 0x758 <ledTest+0x60>
 760:	00 c0       	rjmp	.+0      	; 0x762 <ledTest+0x6a>
 762:	00 00       	nop
	_delay_ms(200);
	PORTD &= ~0xf0;
 764:	82 b3       	in	r24, 0x12	; 18
 766:	8f 70       	andi	r24, 0x0F	; 15
 768:	82 bb       	out	0x12, r24	; 18
	PORTB &= ~0xf0;
 76a:	88 b3       	in	r24, 0x18	; 24
 76c:	8f 70       	andi	r24, 0x0F	; 15
 76e:	88 bb       	out	0x18, r24	; 24
}
 770:	df 91       	pop	r29
 772:	cf 91       	pop	r28
 774:	08 95       	ret

00000776 <ledInit>:

void ledInit()
{
	DDRD |= 0xf0;
 776:	81 b3       	in	r24, 0x11	; 17
 778:	80 6f       	ori	r24, 0xF0	; 240
 77a:	81 bb       	out	0x11, r24	; 17
	DDRB |= 0xf0;
 77c:	87 b3       	in	r24, 0x17	; 23
 77e:	80 6f       	ori	r24, 0xF0	; 240
 780:	87 bb       	out	0x17, r24	; 23
	ledTest();
 782:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <ledTest>
 786:	08 95       	ret

00000788 <main>:
	upArrow[8] = { 0x00, 0x04, 0x04, 0x0E, 0x0E, 0x1F, 0x00, 0x00 },
  downArrow[8] = { 0x00, 0x00, 0x1F, 0x0E, 0x0E, 0x04, 0x04, 0x00 };


int main(void)
{
 788:	cf 93       	push	r28
 78a:	df 93       	push	r29
 78c:	cd b7       	in	r28, 0x3d	; 61
 78e:	de b7       	in	r29, 0x3e	; 62
 790:	61 97       	sbiw	r28, 0x11	; 17
 792:	0f b6       	in	r0, 0x3f	; 63
 794:	f8 94       	cli
 796:	de bf       	out	0x3e, r29	; 62
 798:	0f be       	out	0x3f, r0	; 63
 79a:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xff;
 79c:	8f ef       	ldi	r24, 0xFF	; 255
 79e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0;
 7a0:	1b ba       	out	0x1b, r1	; 27
	
	lcdInit();
 7a2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcdInit>
	ledInit();
 7a6:	0e 94 bb 03 	call	0x776	; 0x776 <ledInit>
	
	Static_Limit(5);
 7aa:	85 e0       	ldi	r24, 0x05	; 5
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	0e 94 51 03 	call	0x6a2	; 0x6a2 <lcdSetLimit>
	Static_CustomChar(7, enter);
 7b2:	62 e7       	ldi	r22, 0x72	; 114
 7b4:	71 e0       	ldi	r23, 0x01	; 1
 7b6:	87 e0       	ldi	r24, 0x07	; 7
 7b8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcdCreateChar>
 7bc:	0e 94 4c 03 	call	0x698	; 0x698 <lcdGetLimit>
 7c0:	01 97       	sbiw	r24, 0x01	; 1
 7c2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <lcdSetLimit>
	Static_Clear();	
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	0e 94 ae 00 	call	0x15c	; 0x15c <lcdSendCmd>
 7cc:	82 e0       	ldi	r24, 0x02	; 2
 7ce:	0e 94 ae 00 	call	0x15c	; 0x15c <lcdSendCmd>
	//Static_Print("Készenlét.", LCD_EMPTY_LINE, LCD_EMPTY_LINE, LCD_EMPTY_LINE);
	
	DDRG &= ~0x1f;
 7d2:	e4 e6       	ldi	r30, 0x64	; 100
 7d4:	f0 e0       	ldi	r31, 0x00	; 0
 7d6:	80 81       	ld	r24, Z
 7d8:	80 7e       	andi	r24, 0xE0	; 224
 7da:	80 83       	st	Z, r24
	
	char buf[17];
	memset(buf, 0, 17);
 7dc:	fe 01       	movw	r30, r28
 7de:	31 96       	adiw	r30, 0x01	; 1
 7e0:	81 e1       	ldi	r24, 0x11	; 17
 7e2:	df 01       	movw	r26, r30
 7e4:	1d 92       	st	X+, r1
 7e6:	8a 95       	dec	r24
 7e8:	e9 f7       	brne	.-6      	; 0x7e4 <main+0x5c>
	
	char ping_prev = 0, ping_curr;
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	01 c0       	rjmp	.+2      	; 0x7f0 <main+0x68>
	upArrow[8] = { 0x00, 0x04, 0x04, 0x0E, 0x0E, 0x1F, 0x00, 0x00 },
  downArrow[8] = { 0x00, 0x00, 0x1F, 0x0E, 0x0E, 0x04, 0x04, 0x00 };


int main(void)
{
 7ee:	81 2f       	mov	r24, r17
	
	char ping_prev = 0, ping_curr;
	
	while (1) 
    {
		ping_curr = PING;
 7f0:	10 91 63 00 	lds	r17, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f0063>
		if (ping_curr != ping_prev)
 7f4:	81 17       	cp	r24, r17
 7f6:	d9 f3       	breq	.-10     	; 0x7ee <main+0x66>
		{
			sprintf(buf, "PORTG: 0x%02x", PING);
 7f8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f0063>
 7fc:	1f 92       	push	r1
 7fe:	8f 93       	push	r24
 800:	85 e2       	ldi	r24, 0x25	; 37
 802:	92 e0       	ldi	r25, 0x02	; 2
 804:	9f 93       	push	r25
 806:	8f 93       	push	r24
 808:	ce 01       	movw	r24, r28
 80a:	01 96       	adiw	r24, 0x01	; 1
 80c:	7c 01       	movw	r14, r24
 80e:	9f 93       	push	r25
 810:	8f 93       	push	r24
 812:	0e 94 57 04 	call	0x8ae	; 0x8ae <sprintf>
			lcdPrint(buf, 0);
 816:	60 e0       	ldi	r22, 0x00	; 0
 818:	70 e0       	ldi	r23, 0x00	; 0
 81a:	c7 01       	movw	r24, r14
 81c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcdPrint>
 820:	0f 90       	pop	r0
 822:	0f 90       	pop	r0
 824:	0f 90       	pop	r0
 826:	0f 90       	pop	r0
 828:	0f 90       	pop	r0
 82a:	0f 90       	pop	r0
 82c:	e0 cf       	rjmp	.-64     	; 0x7ee <main+0x66>

0000082e <_findChar>:
#include "utils.h"

int _findChar(char* haystack, char needle)
{
 82e:	ac 01       	movw	r20, r24
	int ret = -1;
	for (int i = 0; haystack[i] > 0; i++)
 830:	80 e0       	ldi	r24, 0x00	; 0
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	03 c0       	rjmp	.+6      	; 0x83c <_findChar+0xe>
		if (haystack[i] == needle)
 836:	26 17       	cp	r18, r22
 838:	49 f0       	breq	.+18     	; 0x84c <_findChar+0x1e>
#include "utils.h"

int _findChar(char* haystack, char needle)
{
	int ret = -1;
	for (int i = 0; haystack[i] > 0; i++)
 83a:	01 96       	adiw	r24, 0x01	; 1
 83c:	fa 01       	movw	r30, r20
 83e:	e8 0f       	add	r30, r24
 840:	f9 1f       	adc	r31, r25
 842:	20 81       	ld	r18, Z
 844:	21 11       	cpse	r18, r1
 846:	f7 cf       	rjmp	.-18     	; 0x836 <_findChar+0x8>
#include "utils.h"

int _findChar(char* haystack, char needle)
{
	int ret = -1;
 848:	8f ef       	ldi	r24, 0xFF	; 255
 84a:	9f ef       	ldi	r25, 0xFF	; 255
		{
			ret = i;
			break;			
		}
	return ret;
}
 84c:	08 95       	ret

0000084e <_findInt>:

int _findInt(int* haystack, int needle, int len)
{
 84e:	dc 01       	movw	r26, r24
	int ret = -1;
	for (int i = 0; i < len; i++)
 850:	80 e0       	ldi	r24, 0x00	; 0
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	0b c0       	rjmp	.+22     	; 0x86c <_findInt+0x1e>
		if (haystack[i] == needle)
 856:	fc 01       	movw	r30, r24
 858:	ee 0f       	add	r30, r30
 85a:	ff 1f       	adc	r31, r31
 85c:	ea 0f       	add	r30, r26
 85e:	fb 1f       	adc	r31, r27
 860:	20 81       	ld	r18, Z
 862:	31 81       	ldd	r19, Z+1	; 0x01
 864:	26 17       	cp	r18, r22
 866:	37 07       	cpc	r19, r23
 868:	31 f0       	breq	.+12     	; 0x876 <_findInt+0x28>
}

int _findInt(int* haystack, int needle, int len)
{
	int ret = -1;
	for (int i = 0; i < len; i++)
 86a:	01 96       	adiw	r24, 0x01	; 1
 86c:	84 17       	cp	r24, r20
 86e:	95 07       	cpc	r25, r21
 870:	94 f3       	brlt	.-28     	; 0x856 <_findInt+0x8>
	return ret;
}

int _findInt(int* haystack, int needle, int len)
{
	int ret = -1;
 872:	8f ef       	ldi	r24, 0xFF	; 255
 874:	9f ef       	ldi	r25, 0xFF	; 255
		{
			ret = i;
			break;
		}
	return ret;
 876:	08 95       	ret

00000878 <memcpy>:
 878:	fb 01       	movw	r30, r22
 87a:	dc 01       	movw	r26, r24
 87c:	02 c0       	rjmp	.+4      	; 0x882 <memcpy+0xa>
 87e:	01 90       	ld	r0, Z+
 880:	0d 92       	st	X+, r0
 882:	41 50       	subi	r20, 0x01	; 1
 884:	50 40       	sbci	r21, 0x00	; 0
 886:	d8 f7       	brcc	.-10     	; 0x87e <memcpy+0x6>
 888:	08 95       	ret

0000088a <memset>:
 88a:	dc 01       	movw	r26, r24
 88c:	01 c0       	rjmp	.+2      	; 0x890 <memset+0x6>
 88e:	6d 93       	st	X+, r22
 890:	41 50       	subi	r20, 0x01	; 1
 892:	50 40       	sbci	r21, 0x00	; 0
 894:	e0 f7       	brcc	.-8      	; 0x88e <memset+0x4>
 896:	08 95       	ret

00000898 <strcat>:
 898:	fb 01       	movw	r30, r22
 89a:	dc 01       	movw	r26, r24
 89c:	0d 90       	ld	r0, X+
 89e:	00 20       	and	r0, r0
 8a0:	e9 f7       	brne	.-6      	; 0x89c <strcat+0x4>
 8a2:	11 97       	sbiw	r26, 0x01	; 1
 8a4:	01 90       	ld	r0, Z+
 8a6:	0d 92       	st	X+, r0
 8a8:	00 20       	and	r0, r0
 8aa:	e1 f7       	brne	.-8      	; 0x8a4 <strcat+0xc>
 8ac:	08 95       	ret

000008ae <sprintf>:
 8ae:	ae e0       	ldi	r26, 0x0E	; 14
 8b0:	b0 e0       	ldi	r27, 0x00	; 0
 8b2:	ed e5       	ldi	r30, 0x5D	; 93
 8b4:	f4 e0       	ldi	r31, 0x04	; 4
 8b6:	0c 94 18 07 	jmp	0xe30	; 0xe30 <__prologue_saves__+0x1c>
 8ba:	0d 89       	ldd	r16, Y+21	; 0x15
 8bc:	1e 89       	ldd	r17, Y+22	; 0x16
 8be:	86 e0       	ldi	r24, 0x06	; 6
 8c0:	8c 83       	std	Y+4, r24	; 0x04
 8c2:	1a 83       	std	Y+2, r17	; 0x02
 8c4:	09 83       	std	Y+1, r16	; 0x01
 8c6:	8f ef       	ldi	r24, 0xFF	; 255
 8c8:	9f e7       	ldi	r25, 0x7F	; 127
 8ca:	9e 83       	std	Y+6, r25	; 0x06
 8cc:	8d 83       	std	Y+5, r24	; 0x05
 8ce:	ae 01       	movw	r20, r28
 8d0:	47 5e       	subi	r20, 0xE7	; 231
 8d2:	5f 4f       	sbci	r21, 0xFF	; 255
 8d4:	6f 89       	ldd	r22, Y+23	; 0x17
 8d6:	78 8d       	ldd	r23, Y+24	; 0x18
 8d8:	ce 01       	movw	r24, r28
 8da:	01 96       	adiw	r24, 0x01	; 1
 8dc:	0e 94 79 04 	call	0x8f2	; 0x8f2 <vfprintf>
 8e0:	ef 81       	ldd	r30, Y+7	; 0x07
 8e2:	f8 85       	ldd	r31, Y+8	; 0x08
 8e4:	e0 0f       	add	r30, r16
 8e6:	f1 1f       	adc	r31, r17
 8e8:	10 82       	st	Z, r1
 8ea:	2e 96       	adiw	r28, 0x0e	; 14
 8ec:	e4 e0       	ldi	r30, 0x04	; 4
 8ee:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__epilogue_restores__+0x1c>

000008f2 <vfprintf>:
 8f2:	ab e0       	ldi	r26, 0x0B	; 11
 8f4:	b0 e0       	ldi	r27, 0x00	; 0
 8f6:	ef e7       	ldi	r30, 0x7F	; 127
 8f8:	f4 e0       	ldi	r31, 0x04	; 4
 8fa:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__prologue_saves__>
 8fe:	6c 01       	movw	r12, r24
 900:	7b 01       	movw	r14, r22
 902:	8a 01       	movw	r16, r20
 904:	fc 01       	movw	r30, r24
 906:	17 82       	std	Z+7, r1	; 0x07
 908:	16 82       	std	Z+6, r1	; 0x06
 90a:	83 81       	ldd	r24, Z+3	; 0x03
 90c:	81 ff       	sbrs	r24, 1
 90e:	cc c1       	rjmp	.+920    	; 0xca8 <vfprintf+0x3b6>
 910:	ce 01       	movw	r24, r28
 912:	01 96       	adiw	r24, 0x01	; 1
 914:	3c 01       	movw	r6, r24
 916:	f6 01       	movw	r30, r12
 918:	93 81       	ldd	r25, Z+3	; 0x03
 91a:	f7 01       	movw	r30, r14
 91c:	93 fd       	sbrc	r25, 3
 91e:	85 91       	lpm	r24, Z+
 920:	93 ff       	sbrs	r25, 3
 922:	81 91       	ld	r24, Z+
 924:	7f 01       	movw	r14, r30
 926:	88 23       	and	r24, r24
 928:	09 f4       	brne	.+2      	; 0x92c <vfprintf+0x3a>
 92a:	ba c1       	rjmp	.+884    	; 0xca0 <vfprintf+0x3ae>
 92c:	85 32       	cpi	r24, 0x25	; 37
 92e:	39 f4       	brne	.+14     	; 0x93e <vfprintf+0x4c>
 930:	93 fd       	sbrc	r25, 3
 932:	85 91       	lpm	r24, Z+
 934:	93 ff       	sbrs	r25, 3
 936:	81 91       	ld	r24, Z+
 938:	7f 01       	movw	r14, r30
 93a:	85 32       	cpi	r24, 0x25	; 37
 93c:	29 f4       	brne	.+10     	; 0x948 <vfprintf+0x56>
 93e:	b6 01       	movw	r22, r12
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 94 70 06 	call	0xce0	; 0xce0 <fputc>
 946:	e7 cf       	rjmp	.-50     	; 0x916 <vfprintf+0x24>
 948:	91 2c       	mov	r9, r1
 94a:	21 2c       	mov	r2, r1
 94c:	31 2c       	mov	r3, r1
 94e:	ff e1       	ldi	r31, 0x1F	; 31
 950:	f3 15       	cp	r31, r3
 952:	d8 f0       	brcs	.+54     	; 0x98a <vfprintf+0x98>
 954:	8b 32       	cpi	r24, 0x2B	; 43
 956:	79 f0       	breq	.+30     	; 0x976 <vfprintf+0x84>
 958:	38 f4       	brcc	.+14     	; 0x968 <vfprintf+0x76>
 95a:	80 32       	cpi	r24, 0x20	; 32
 95c:	79 f0       	breq	.+30     	; 0x97c <vfprintf+0x8a>
 95e:	83 32       	cpi	r24, 0x23	; 35
 960:	a1 f4       	brne	.+40     	; 0x98a <vfprintf+0x98>
 962:	23 2d       	mov	r18, r3
 964:	20 61       	ori	r18, 0x10	; 16
 966:	1d c0       	rjmp	.+58     	; 0x9a2 <vfprintf+0xb0>
 968:	8d 32       	cpi	r24, 0x2D	; 45
 96a:	61 f0       	breq	.+24     	; 0x984 <vfprintf+0x92>
 96c:	80 33       	cpi	r24, 0x30	; 48
 96e:	69 f4       	brne	.+26     	; 0x98a <vfprintf+0x98>
 970:	23 2d       	mov	r18, r3
 972:	21 60       	ori	r18, 0x01	; 1
 974:	16 c0       	rjmp	.+44     	; 0x9a2 <vfprintf+0xb0>
 976:	83 2d       	mov	r24, r3
 978:	82 60       	ori	r24, 0x02	; 2
 97a:	38 2e       	mov	r3, r24
 97c:	e3 2d       	mov	r30, r3
 97e:	e4 60       	ori	r30, 0x04	; 4
 980:	3e 2e       	mov	r3, r30
 982:	2a c0       	rjmp	.+84     	; 0x9d8 <vfprintf+0xe6>
 984:	f3 2d       	mov	r31, r3
 986:	f8 60       	ori	r31, 0x08	; 8
 988:	1d c0       	rjmp	.+58     	; 0x9c4 <vfprintf+0xd2>
 98a:	37 fc       	sbrc	r3, 7
 98c:	2d c0       	rjmp	.+90     	; 0x9e8 <vfprintf+0xf6>
 98e:	20 ed       	ldi	r18, 0xD0	; 208
 990:	28 0f       	add	r18, r24
 992:	2a 30       	cpi	r18, 0x0A	; 10
 994:	40 f0       	brcs	.+16     	; 0x9a6 <vfprintf+0xb4>
 996:	8e 32       	cpi	r24, 0x2E	; 46
 998:	b9 f4       	brne	.+46     	; 0x9c8 <vfprintf+0xd6>
 99a:	36 fc       	sbrc	r3, 6
 99c:	81 c1       	rjmp	.+770    	; 0xca0 <vfprintf+0x3ae>
 99e:	23 2d       	mov	r18, r3
 9a0:	20 64       	ori	r18, 0x40	; 64
 9a2:	32 2e       	mov	r3, r18
 9a4:	19 c0       	rjmp	.+50     	; 0x9d8 <vfprintf+0xe6>
 9a6:	36 fe       	sbrs	r3, 6
 9a8:	06 c0       	rjmp	.+12     	; 0x9b6 <vfprintf+0xc4>
 9aa:	8a e0       	ldi	r24, 0x0A	; 10
 9ac:	98 9e       	mul	r9, r24
 9ae:	20 0d       	add	r18, r0
 9b0:	11 24       	eor	r1, r1
 9b2:	92 2e       	mov	r9, r18
 9b4:	11 c0       	rjmp	.+34     	; 0x9d8 <vfprintf+0xe6>
 9b6:	ea e0       	ldi	r30, 0x0A	; 10
 9b8:	2e 9e       	mul	r2, r30
 9ba:	20 0d       	add	r18, r0
 9bc:	11 24       	eor	r1, r1
 9be:	22 2e       	mov	r2, r18
 9c0:	f3 2d       	mov	r31, r3
 9c2:	f0 62       	ori	r31, 0x20	; 32
 9c4:	3f 2e       	mov	r3, r31
 9c6:	08 c0       	rjmp	.+16     	; 0x9d8 <vfprintf+0xe6>
 9c8:	8c 36       	cpi	r24, 0x6C	; 108
 9ca:	21 f4       	brne	.+8      	; 0x9d4 <vfprintf+0xe2>
 9cc:	83 2d       	mov	r24, r3
 9ce:	80 68       	ori	r24, 0x80	; 128
 9d0:	38 2e       	mov	r3, r24
 9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <vfprintf+0xe6>
 9d4:	88 36       	cpi	r24, 0x68	; 104
 9d6:	41 f4       	brne	.+16     	; 0x9e8 <vfprintf+0xf6>
 9d8:	f7 01       	movw	r30, r14
 9da:	93 fd       	sbrc	r25, 3
 9dc:	85 91       	lpm	r24, Z+
 9de:	93 ff       	sbrs	r25, 3
 9e0:	81 91       	ld	r24, Z+
 9e2:	7f 01       	movw	r14, r30
 9e4:	81 11       	cpse	r24, r1
 9e6:	b3 cf       	rjmp	.-154    	; 0x94e <vfprintf+0x5c>
 9e8:	98 2f       	mov	r25, r24
 9ea:	9f 7d       	andi	r25, 0xDF	; 223
 9ec:	95 54       	subi	r25, 0x45	; 69
 9ee:	93 30       	cpi	r25, 0x03	; 3
 9f0:	28 f4       	brcc	.+10     	; 0x9fc <vfprintf+0x10a>
 9f2:	0c 5f       	subi	r16, 0xFC	; 252
 9f4:	1f 4f       	sbci	r17, 0xFF	; 255
 9f6:	9f e3       	ldi	r25, 0x3F	; 63
 9f8:	99 83       	std	Y+1, r25	; 0x01
 9fa:	0d c0       	rjmp	.+26     	; 0xa16 <vfprintf+0x124>
 9fc:	83 36       	cpi	r24, 0x63	; 99
 9fe:	31 f0       	breq	.+12     	; 0xa0c <vfprintf+0x11a>
 a00:	83 37       	cpi	r24, 0x73	; 115
 a02:	71 f0       	breq	.+28     	; 0xa20 <vfprintf+0x12e>
 a04:	83 35       	cpi	r24, 0x53	; 83
 a06:	09 f0       	breq	.+2      	; 0xa0a <vfprintf+0x118>
 a08:	59 c0       	rjmp	.+178    	; 0xabc <vfprintf+0x1ca>
 a0a:	21 c0       	rjmp	.+66     	; 0xa4e <vfprintf+0x15c>
 a0c:	f8 01       	movw	r30, r16
 a0e:	80 81       	ld	r24, Z
 a10:	89 83       	std	Y+1, r24	; 0x01
 a12:	0e 5f       	subi	r16, 0xFE	; 254
 a14:	1f 4f       	sbci	r17, 0xFF	; 255
 a16:	88 24       	eor	r8, r8
 a18:	83 94       	inc	r8
 a1a:	91 2c       	mov	r9, r1
 a1c:	53 01       	movw	r10, r6
 a1e:	13 c0       	rjmp	.+38     	; 0xa46 <vfprintf+0x154>
 a20:	28 01       	movw	r4, r16
 a22:	f2 e0       	ldi	r31, 0x02	; 2
 a24:	4f 0e       	add	r4, r31
 a26:	51 1c       	adc	r5, r1
 a28:	f8 01       	movw	r30, r16
 a2a:	a0 80       	ld	r10, Z
 a2c:	b1 80       	ldd	r11, Z+1	; 0x01
 a2e:	36 fe       	sbrs	r3, 6
 a30:	03 c0       	rjmp	.+6      	; 0xa38 <vfprintf+0x146>
 a32:	69 2d       	mov	r22, r9
 a34:	70 e0       	ldi	r23, 0x00	; 0
 a36:	02 c0       	rjmp	.+4      	; 0xa3c <vfprintf+0x14a>
 a38:	6f ef       	ldi	r22, 0xFF	; 255
 a3a:	7f ef       	ldi	r23, 0xFF	; 255
 a3c:	c5 01       	movw	r24, r10
 a3e:	0e 94 65 06 	call	0xcca	; 0xcca <strnlen>
 a42:	4c 01       	movw	r8, r24
 a44:	82 01       	movw	r16, r4
 a46:	f3 2d       	mov	r31, r3
 a48:	ff 77       	andi	r31, 0x7F	; 127
 a4a:	3f 2e       	mov	r3, r31
 a4c:	16 c0       	rjmp	.+44     	; 0xa7a <vfprintf+0x188>
 a4e:	28 01       	movw	r4, r16
 a50:	22 e0       	ldi	r18, 0x02	; 2
 a52:	42 0e       	add	r4, r18
 a54:	51 1c       	adc	r5, r1
 a56:	f8 01       	movw	r30, r16
 a58:	a0 80       	ld	r10, Z
 a5a:	b1 80       	ldd	r11, Z+1	; 0x01
 a5c:	36 fe       	sbrs	r3, 6
 a5e:	03 c0       	rjmp	.+6      	; 0xa66 <vfprintf+0x174>
 a60:	69 2d       	mov	r22, r9
 a62:	70 e0       	ldi	r23, 0x00	; 0
 a64:	02 c0       	rjmp	.+4      	; 0xa6a <vfprintf+0x178>
 a66:	6f ef       	ldi	r22, 0xFF	; 255
 a68:	7f ef       	ldi	r23, 0xFF	; 255
 a6a:	c5 01       	movw	r24, r10
 a6c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <strnlen_P>
 a70:	4c 01       	movw	r8, r24
 a72:	f3 2d       	mov	r31, r3
 a74:	f0 68       	ori	r31, 0x80	; 128
 a76:	3f 2e       	mov	r3, r31
 a78:	82 01       	movw	r16, r4
 a7a:	33 fc       	sbrc	r3, 3
 a7c:	1b c0       	rjmp	.+54     	; 0xab4 <vfprintf+0x1c2>
 a7e:	82 2d       	mov	r24, r2
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	88 16       	cp	r8, r24
 a84:	99 06       	cpc	r9, r25
 a86:	b0 f4       	brcc	.+44     	; 0xab4 <vfprintf+0x1c2>
 a88:	b6 01       	movw	r22, r12
 a8a:	80 e2       	ldi	r24, 0x20	; 32
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	0e 94 70 06 	call	0xce0	; 0xce0 <fputc>
 a92:	2a 94       	dec	r2
 a94:	f4 cf       	rjmp	.-24     	; 0xa7e <vfprintf+0x18c>
 a96:	f5 01       	movw	r30, r10
 a98:	37 fc       	sbrc	r3, 7
 a9a:	85 91       	lpm	r24, Z+
 a9c:	37 fe       	sbrs	r3, 7
 a9e:	81 91       	ld	r24, Z+
 aa0:	5f 01       	movw	r10, r30
 aa2:	b6 01       	movw	r22, r12
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	0e 94 70 06 	call	0xce0	; 0xce0 <fputc>
 aaa:	21 10       	cpse	r2, r1
 aac:	2a 94       	dec	r2
 aae:	21 e0       	ldi	r18, 0x01	; 1
 ab0:	82 1a       	sub	r8, r18
 ab2:	91 08       	sbc	r9, r1
 ab4:	81 14       	cp	r8, r1
 ab6:	91 04       	cpc	r9, r1
 ab8:	71 f7       	brne	.-36     	; 0xa96 <vfprintf+0x1a4>
 aba:	e8 c0       	rjmp	.+464    	; 0xc8c <vfprintf+0x39a>
 abc:	84 36       	cpi	r24, 0x64	; 100
 abe:	11 f0       	breq	.+4      	; 0xac4 <vfprintf+0x1d2>
 ac0:	89 36       	cpi	r24, 0x69	; 105
 ac2:	41 f5       	brne	.+80     	; 0xb14 <vfprintf+0x222>
 ac4:	f8 01       	movw	r30, r16
 ac6:	37 fe       	sbrs	r3, 7
 ac8:	07 c0       	rjmp	.+14     	; 0xad8 <vfprintf+0x1e6>
 aca:	60 81       	ld	r22, Z
 acc:	71 81       	ldd	r23, Z+1	; 0x01
 ace:	82 81       	ldd	r24, Z+2	; 0x02
 ad0:	93 81       	ldd	r25, Z+3	; 0x03
 ad2:	0c 5f       	subi	r16, 0xFC	; 252
 ad4:	1f 4f       	sbci	r17, 0xFF	; 255
 ad6:	08 c0       	rjmp	.+16     	; 0xae8 <vfprintf+0x1f6>
 ad8:	60 81       	ld	r22, Z
 ada:	71 81       	ldd	r23, Z+1	; 0x01
 adc:	07 2e       	mov	r0, r23
 ade:	00 0c       	add	r0, r0
 ae0:	88 0b       	sbc	r24, r24
 ae2:	99 0b       	sbc	r25, r25
 ae4:	0e 5f       	subi	r16, 0xFE	; 254
 ae6:	1f 4f       	sbci	r17, 0xFF	; 255
 ae8:	f3 2d       	mov	r31, r3
 aea:	ff 76       	andi	r31, 0x6F	; 111
 aec:	3f 2e       	mov	r3, r31
 aee:	97 ff       	sbrs	r25, 7
 af0:	09 c0       	rjmp	.+18     	; 0xb04 <vfprintf+0x212>
 af2:	90 95       	com	r25
 af4:	80 95       	com	r24
 af6:	70 95       	com	r23
 af8:	61 95       	neg	r22
 afa:	7f 4f       	sbci	r23, 0xFF	; 255
 afc:	8f 4f       	sbci	r24, 0xFF	; 255
 afe:	9f 4f       	sbci	r25, 0xFF	; 255
 b00:	f0 68       	ori	r31, 0x80	; 128
 b02:	3f 2e       	mov	r3, r31
 b04:	2a e0       	ldi	r18, 0x0A	; 10
 b06:	30 e0       	ldi	r19, 0x00	; 0
 b08:	a3 01       	movw	r20, r6
 b0a:	0e 94 ac 06 	call	0xd58	; 0xd58 <__ultoa_invert>
 b0e:	88 2e       	mov	r8, r24
 b10:	86 18       	sub	r8, r6
 b12:	45 c0       	rjmp	.+138    	; 0xb9e <vfprintf+0x2ac>
 b14:	85 37       	cpi	r24, 0x75	; 117
 b16:	31 f4       	brne	.+12     	; 0xb24 <vfprintf+0x232>
 b18:	23 2d       	mov	r18, r3
 b1a:	2f 7e       	andi	r18, 0xEF	; 239
 b1c:	b2 2e       	mov	r11, r18
 b1e:	2a e0       	ldi	r18, 0x0A	; 10
 b20:	30 e0       	ldi	r19, 0x00	; 0
 b22:	25 c0       	rjmp	.+74     	; 0xb6e <vfprintf+0x27c>
 b24:	93 2d       	mov	r25, r3
 b26:	99 7f       	andi	r25, 0xF9	; 249
 b28:	b9 2e       	mov	r11, r25
 b2a:	8f 36       	cpi	r24, 0x6F	; 111
 b2c:	c1 f0       	breq	.+48     	; 0xb5e <vfprintf+0x26c>
 b2e:	18 f4       	brcc	.+6      	; 0xb36 <vfprintf+0x244>
 b30:	88 35       	cpi	r24, 0x58	; 88
 b32:	79 f0       	breq	.+30     	; 0xb52 <vfprintf+0x260>
 b34:	b5 c0       	rjmp	.+362    	; 0xca0 <vfprintf+0x3ae>
 b36:	80 37       	cpi	r24, 0x70	; 112
 b38:	19 f0       	breq	.+6      	; 0xb40 <vfprintf+0x24e>
 b3a:	88 37       	cpi	r24, 0x78	; 120
 b3c:	21 f0       	breq	.+8      	; 0xb46 <vfprintf+0x254>
 b3e:	b0 c0       	rjmp	.+352    	; 0xca0 <vfprintf+0x3ae>
 b40:	e9 2f       	mov	r30, r25
 b42:	e0 61       	ori	r30, 0x10	; 16
 b44:	be 2e       	mov	r11, r30
 b46:	b4 fe       	sbrs	r11, 4
 b48:	0d c0       	rjmp	.+26     	; 0xb64 <vfprintf+0x272>
 b4a:	fb 2d       	mov	r31, r11
 b4c:	f4 60       	ori	r31, 0x04	; 4
 b4e:	bf 2e       	mov	r11, r31
 b50:	09 c0       	rjmp	.+18     	; 0xb64 <vfprintf+0x272>
 b52:	34 fe       	sbrs	r3, 4
 b54:	0a c0       	rjmp	.+20     	; 0xb6a <vfprintf+0x278>
 b56:	29 2f       	mov	r18, r25
 b58:	26 60       	ori	r18, 0x06	; 6
 b5a:	b2 2e       	mov	r11, r18
 b5c:	06 c0       	rjmp	.+12     	; 0xb6a <vfprintf+0x278>
 b5e:	28 e0       	ldi	r18, 0x08	; 8
 b60:	30 e0       	ldi	r19, 0x00	; 0
 b62:	05 c0       	rjmp	.+10     	; 0xb6e <vfprintf+0x27c>
 b64:	20 e1       	ldi	r18, 0x10	; 16
 b66:	30 e0       	ldi	r19, 0x00	; 0
 b68:	02 c0       	rjmp	.+4      	; 0xb6e <vfprintf+0x27c>
 b6a:	20 e1       	ldi	r18, 0x10	; 16
 b6c:	32 e0       	ldi	r19, 0x02	; 2
 b6e:	f8 01       	movw	r30, r16
 b70:	b7 fe       	sbrs	r11, 7
 b72:	07 c0       	rjmp	.+14     	; 0xb82 <vfprintf+0x290>
 b74:	60 81       	ld	r22, Z
 b76:	71 81       	ldd	r23, Z+1	; 0x01
 b78:	82 81       	ldd	r24, Z+2	; 0x02
 b7a:	93 81       	ldd	r25, Z+3	; 0x03
 b7c:	0c 5f       	subi	r16, 0xFC	; 252
 b7e:	1f 4f       	sbci	r17, 0xFF	; 255
 b80:	06 c0       	rjmp	.+12     	; 0xb8e <vfprintf+0x29c>
 b82:	60 81       	ld	r22, Z
 b84:	71 81       	ldd	r23, Z+1	; 0x01
 b86:	80 e0       	ldi	r24, 0x00	; 0
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	0e 5f       	subi	r16, 0xFE	; 254
 b8c:	1f 4f       	sbci	r17, 0xFF	; 255
 b8e:	a3 01       	movw	r20, r6
 b90:	0e 94 ac 06 	call	0xd58	; 0xd58 <__ultoa_invert>
 b94:	88 2e       	mov	r8, r24
 b96:	86 18       	sub	r8, r6
 b98:	fb 2d       	mov	r31, r11
 b9a:	ff 77       	andi	r31, 0x7F	; 127
 b9c:	3f 2e       	mov	r3, r31
 b9e:	36 fe       	sbrs	r3, 6
 ba0:	0d c0       	rjmp	.+26     	; 0xbbc <vfprintf+0x2ca>
 ba2:	23 2d       	mov	r18, r3
 ba4:	2e 7f       	andi	r18, 0xFE	; 254
 ba6:	a2 2e       	mov	r10, r18
 ba8:	89 14       	cp	r8, r9
 baa:	58 f4       	brcc	.+22     	; 0xbc2 <vfprintf+0x2d0>
 bac:	34 fe       	sbrs	r3, 4
 bae:	0b c0       	rjmp	.+22     	; 0xbc6 <vfprintf+0x2d4>
 bb0:	32 fc       	sbrc	r3, 2
 bb2:	09 c0       	rjmp	.+18     	; 0xbc6 <vfprintf+0x2d4>
 bb4:	83 2d       	mov	r24, r3
 bb6:	8e 7e       	andi	r24, 0xEE	; 238
 bb8:	a8 2e       	mov	r10, r24
 bba:	05 c0       	rjmp	.+10     	; 0xbc6 <vfprintf+0x2d4>
 bbc:	b8 2c       	mov	r11, r8
 bbe:	a3 2c       	mov	r10, r3
 bc0:	03 c0       	rjmp	.+6      	; 0xbc8 <vfprintf+0x2d6>
 bc2:	b8 2c       	mov	r11, r8
 bc4:	01 c0       	rjmp	.+2      	; 0xbc8 <vfprintf+0x2d6>
 bc6:	b9 2c       	mov	r11, r9
 bc8:	a4 fe       	sbrs	r10, 4
 bca:	0f c0       	rjmp	.+30     	; 0xbea <vfprintf+0x2f8>
 bcc:	fe 01       	movw	r30, r28
 bce:	e8 0d       	add	r30, r8
 bd0:	f1 1d       	adc	r31, r1
 bd2:	80 81       	ld	r24, Z
 bd4:	80 33       	cpi	r24, 0x30	; 48
 bd6:	21 f4       	brne	.+8      	; 0xbe0 <vfprintf+0x2ee>
 bd8:	9a 2d       	mov	r25, r10
 bda:	99 7e       	andi	r25, 0xE9	; 233
 bdc:	a9 2e       	mov	r10, r25
 bde:	09 c0       	rjmp	.+18     	; 0xbf2 <vfprintf+0x300>
 be0:	a2 fe       	sbrs	r10, 2
 be2:	06 c0       	rjmp	.+12     	; 0xbf0 <vfprintf+0x2fe>
 be4:	b3 94       	inc	r11
 be6:	b3 94       	inc	r11
 be8:	04 c0       	rjmp	.+8      	; 0xbf2 <vfprintf+0x300>
 bea:	8a 2d       	mov	r24, r10
 bec:	86 78       	andi	r24, 0x86	; 134
 bee:	09 f0       	breq	.+2      	; 0xbf2 <vfprintf+0x300>
 bf0:	b3 94       	inc	r11
 bf2:	a3 fc       	sbrc	r10, 3
 bf4:	11 c0       	rjmp	.+34     	; 0xc18 <vfprintf+0x326>
 bf6:	a0 fe       	sbrs	r10, 0
 bf8:	06 c0       	rjmp	.+12     	; 0xc06 <vfprintf+0x314>
 bfa:	b2 14       	cp	r11, r2
 bfc:	88 f4       	brcc	.+34     	; 0xc20 <vfprintf+0x32e>
 bfe:	28 0c       	add	r2, r8
 c00:	92 2c       	mov	r9, r2
 c02:	9b 18       	sub	r9, r11
 c04:	0e c0       	rjmp	.+28     	; 0xc22 <vfprintf+0x330>
 c06:	b2 14       	cp	r11, r2
 c08:	60 f4       	brcc	.+24     	; 0xc22 <vfprintf+0x330>
 c0a:	b6 01       	movw	r22, r12
 c0c:	80 e2       	ldi	r24, 0x20	; 32
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	0e 94 70 06 	call	0xce0	; 0xce0 <fputc>
 c14:	b3 94       	inc	r11
 c16:	f7 cf       	rjmp	.-18     	; 0xc06 <vfprintf+0x314>
 c18:	b2 14       	cp	r11, r2
 c1a:	18 f4       	brcc	.+6      	; 0xc22 <vfprintf+0x330>
 c1c:	2b 18       	sub	r2, r11
 c1e:	02 c0       	rjmp	.+4      	; 0xc24 <vfprintf+0x332>
 c20:	98 2c       	mov	r9, r8
 c22:	21 2c       	mov	r2, r1
 c24:	a4 fe       	sbrs	r10, 4
 c26:	10 c0       	rjmp	.+32     	; 0xc48 <vfprintf+0x356>
 c28:	b6 01       	movw	r22, r12
 c2a:	80 e3       	ldi	r24, 0x30	; 48
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	0e 94 70 06 	call	0xce0	; 0xce0 <fputc>
 c32:	a2 fe       	sbrs	r10, 2
 c34:	17 c0       	rjmp	.+46     	; 0xc64 <vfprintf+0x372>
 c36:	a1 fc       	sbrc	r10, 1
 c38:	03 c0       	rjmp	.+6      	; 0xc40 <vfprintf+0x34e>
 c3a:	88 e7       	ldi	r24, 0x78	; 120
 c3c:	90 e0       	ldi	r25, 0x00	; 0
 c3e:	02 c0       	rjmp	.+4      	; 0xc44 <vfprintf+0x352>
 c40:	88 e5       	ldi	r24, 0x58	; 88
 c42:	90 e0       	ldi	r25, 0x00	; 0
 c44:	b6 01       	movw	r22, r12
 c46:	0c c0       	rjmp	.+24     	; 0xc60 <vfprintf+0x36e>
 c48:	8a 2d       	mov	r24, r10
 c4a:	86 78       	andi	r24, 0x86	; 134
 c4c:	59 f0       	breq	.+22     	; 0xc64 <vfprintf+0x372>
 c4e:	a1 fe       	sbrs	r10, 1
 c50:	02 c0       	rjmp	.+4      	; 0xc56 <vfprintf+0x364>
 c52:	8b e2       	ldi	r24, 0x2B	; 43
 c54:	01 c0       	rjmp	.+2      	; 0xc58 <vfprintf+0x366>
 c56:	80 e2       	ldi	r24, 0x20	; 32
 c58:	a7 fc       	sbrc	r10, 7
 c5a:	8d e2       	ldi	r24, 0x2D	; 45
 c5c:	b6 01       	movw	r22, r12
 c5e:	90 e0       	ldi	r25, 0x00	; 0
 c60:	0e 94 70 06 	call	0xce0	; 0xce0 <fputc>
 c64:	89 14       	cp	r8, r9
 c66:	38 f4       	brcc	.+14     	; 0xc76 <vfprintf+0x384>
 c68:	b6 01       	movw	r22, r12
 c6a:	80 e3       	ldi	r24, 0x30	; 48
 c6c:	90 e0       	ldi	r25, 0x00	; 0
 c6e:	0e 94 70 06 	call	0xce0	; 0xce0 <fputc>
 c72:	9a 94       	dec	r9
 c74:	f7 cf       	rjmp	.-18     	; 0xc64 <vfprintf+0x372>
 c76:	8a 94       	dec	r8
 c78:	f3 01       	movw	r30, r6
 c7a:	e8 0d       	add	r30, r8
 c7c:	f1 1d       	adc	r31, r1
 c7e:	80 81       	ld	r24, Z
 c80:	b6 01       	movw	r22, r12
 c82:	90 e0       	ldi	r25, 0x00	; 0
 c84:	0e 94 70 06 	call	0xce0	; 0xce0 <fputc>
 c88:	81 10       	cpse	r8, r1
 c8a:	f5 cf       	rjmp	.-22     	; 0xc76 <vfprintf+0x384>
 c8c:	22 20       	and	r2, r2
 c8e:	09 f4       	brne	.+2      	; 0xc92 <vfprintf+0x3a0>
 c90:	42 ce       	rjmp	.-892    	; 0x916 <vfprintf+0x24>
 c92:	b6 01       	movw	r22, r12
 c94:	80 e2       	ldi	r24, 0x20	; 32
 c96:	90 e0       	ldi	r25, 0x00	; 0
 c98:	0e 94 70 06 	call	0xce0	; 0xce0 <fputc>
 c9c:	2a 94       	dec	r2
 c9e:	f6 cf       	rjmp	.-20     	; 0xc8c <vfprintf+0x39a>
 ca0:	f6 01       	movw	r30, r12
 ca2:	86 81       	ldd	r24, Z+6	; 0x06
 ca4:	97 81       	ldd	r25, Z+7	; 0x07
 ca6:	02 c0       	rjmp	.+4      	; 0xcac <vfprintf+0x3ba>
 ca8:	8f ef       	ldi	r24, 0xFF	; 255
 caa:	9f ef       	ldi	r25, 0xFF	; 255
 cac:	2b 96       	adiw	r28, 0x0b	; 11
 cae:	e2 e1       	ldi	r30, 0x12	; 18
 cb0:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__epilogue_restores__>

00000cb4 <strnlen_P>:
 cb4:	fc 01       	movw	r30, r24
 cb6:	05 90       	lpm	r0, Z+
 cb8:	61 50       	subi	r22, 0x01	; 1
 cba:	70 40       	sbci	r23, 0x00	; 0
 cbc:	01 10       	cpse	r0, r1
 cbe:	d8 f7       	brcc	.-10     	; 0xcb6 <strnlen_P+0x2>
 cc0:	80 95       	com	r24
 cc2:	90 95       	com	r25
 cc4:	8e 0f       	add	r24, r30
 cc6:	9f 1f       	adc	r25, r31
 cc8:	08 95       	ret

00000cca <strnlen>:
 cca:	fc 01       	movw	r30, r24
 ccc:	61 50       	subi	r22, 0x01	; 1
 cce:	70 40       	sbci	r23, 0x00	; 0
 cd0:	01 90       	ld	r0, Z+
 cd2:	01 10       	cpse	r0, r1
 cd4:	d8 f7       	brcc	.-10     	; 0xccc <strnlen+0x2>
 cd6:	80 95       	com	r24
 cd8:	90 95       	com	r25
 cda:	8e 0f       	add	r24, r30
 cdc:	9f 1f       	adc	r25, r31
 cde:	08 95       	ret

00000ce0 <fputc>:
 ce0:	0f 93       	push	r16
 ce2:	1f 93       	push	r17
 ce4:	cf 93       	push	r28
 ce6:	df 93       	push	r29
 ce8:	fb 01       	movw	r30, r22
 cea:	23 81       	ldd	r18, Z+3	; 0x03
 cec:	21 fd       	sbrc	r18, 1
 cee:	03 c0       	rjmp	.+6      	; 0xcf6 <fputc+0x16>
 cf0:	8f ef       	ldi	r24, 0xFF	; 255
 cf2:	9f ef       	ldi	r25, 0xFF	; 255
 cf4:	2c c0       	rjmp	.+88     	; 0xd4e <fputc+0x6e>
 cf6:	22 ff       	sbrs	r18, 2
 cf8:	16 c0       	rjmp	.+44     	; 0xd26 <fputc+0x46>
 cfa:	46 81       	ldd	r20, Z+6	; 0x06
 cfc:	57 81       	ldd	r21, Z+7	; 0x07
 cfe:	24 81       	ldd	r18, Z+4	; 0x04
 d00:	35 81       	ldd	r19, Z+5	; 0x05
 d02:	42 17       	cp	r20, r18
 d04:	53 07       	cpc	r21, r19
 d06:	44 f4       	brge	.+16     	; 0xd18 <fputc+0x38>
 d08:	a0 81       	ld	r26, Z
 d0a:	b1 81       	ldd	r27, Z+1	; 0x01
 d0c:	9d 01       	movw	r18, r26
 d0e:	2f 5f       	subi	r18, 0xFF	; 255
 d10:	3f 4f       	sbci	r19, 0xFF	; 255
 d12:	31 83       	std	Z+1, r19	; 0x01
 d14:	20 83       	st	Z, r18
 d16:	8c 93       	st	X, r24
 d18:	26 81       	ldd	r18, Z+6	; 0x06
 d1a:	37 81       	ldd	r19, Z+7	; 0x07
 d1c:	2f 5f       	subi	r18, 0xFF	; 255
 d1e:	3f 4f       	sbci	r19, 0xFF	; 255
 d20:	37 83       	std	Z+7, r19	; 0x07
 d22:	26 83       	std	Z+6, r18	; 0x06
 d24:	14 c0       	rjmp	.+40     	; 0xd4e <fputc+0x6e>
 d26:	8b 01       	movw	r16, r22
 d28:	ec 01       	movw	r28, r24
 d2a:	fb 01       	movw	r30, r22
 d2c:	00 84       	ldd	r0, Z+8	; 0x08
 d2e:	f1 85       	ldd	r31, Z+9	; 0x09
 d30:	e0 2d       	mov	r30, r0
 d32:	09 95       	icall
 d34:	89 2b       	or	r24, r25
 d36:	e1 f6       	brne	.-72     	; 0xcf0 <fputc+0x10>
 d38:	d8 01       	movw	r26, r16
 d3a:	16 96       	adiw	r26, 0x06	; 6
 d3c:	8d 91       	ld	r24, X+
 d3e:	9c 91       	ld	r25, X
 d40:	17 97       	sbiw	r26, 0x07	; 7
 d42:	01 96       	adiw	r24, 0x01	; 1
 d44:	17 96       	adiw	r26, 0x07	; 7
 d46:	9c 93       	st	X, r25
 d48:	8e 93       	st	-X, r24
 d4a:	16 97       	sbiw	r26, 0x06	; 6
 d4c:	ce 01       	movw	r24, r28
 d4e:	df 91       	pop	r29
 d50:	cf 91       	pop	r28
 d52:	1f 91       	pop	r17
 d54:	0f 91       	pop	r16
 d56:	08 95       	ret

00000d58 <__ultoa_invert>:
 d58:	fa 01       	movw	r30, r20
 d5a:	aa 27       	eor	r26, r26
 d5c:	28 30       	cpi	r18, 0x08	; 8
 d5e:	51 f1       	breq	.+84     	; 0xdb4 <__ultoa_invert+0x5c>
 d60:	20 31       	cpi	r18, 0x10	; 16
 d62:	81 f1       	breq	.+96     	; 0xdc4 <__ultoa_invert+0x6c>
 d64:	e8 94       	clt
 d66:	6f 93       	push	r22
 d68:	6e 7f       	andi	r22, 0xFE	; 254
 d6a:	6e 5f       	subi	r22, 0xFE	; 254
 d6c:	7f 4f       	sbci	r23, 0xFF	; 255
 d6e:	8f 4f       	sbci	r24, 0xFF	; 255
 d70:	9f 4f       	sbci	r25, 0xFF	; 255
 d72:	af 4f       	sbci	r26, 0xFF	; 255
 d74:	b1 e0       	ldi	r27, 0x01	; 1
 d76:	3e d0       	rcall	.+124    	; 0xdf4 <__ultoa_invert+0x9c>
 d78:	b4 e0       	ldi	r27, 0x04	; 4
 d7a:	3c d0       	rcall	.+120    	; 0xdf4 <__ultoa_invert+0x9c>
 d7c:	67 0f       	add	r22, r23
 d7e:	78 1f       	adc	r23, r24
 d80:	89 1f       	adc	r24, r25
 d82:	9a 1f       	adc	r25, r26
 d84:	a1 1d       	adc	r26, r1
 d86:	68 0f       	add	r22, r24
 d88:	79 1f       	adc	r23, r25
 d8a:	8a 1f       	adc	r24, r26
 d8c:	91 1d       	adc	r25, r1
 d8e:	a1 1d       	adc	r26, r1
 d90:	6a 0f       	add	r22, r26
 d92:	71 1d       	adc	r23, r1
 d94:	81 1d       	adc	r24, r1
 d96:	91 1d       	adc	r25, r1
 d98:	a1 1d       	adc	r26, r1
 d9a:	20 d0       	rcall	.+64     	; 0xddc <__ultoa_invert+0x84>
 d9c:	09 f4       	brne	.+2      	; 0xda0 <__ultoa_invert+0x48>
 d9e:	68 94       	set
 da0:	3f 91       	pop	r19
 da2:	2a e0       	ldi	r18, 0x0A	; 10
 da4:	26 9f       	mul	r18, r22
 da6:	11 24       	eor	r1, r1
 da8:	30 19       	sub	r19, r0
 daa:	30 5d       	subi	r19, 0xD0	; 208
 dac:	31 93       	st	Z+, r19
 dae:	de f6       	brtc	.-74     	; 0xd66 <__ultoa_invert+0xe>
 db0:	cf 01       	movw	r24, r30
 db2:	08 95       	ret
 db4:	46 2f       	mov	r20, r22
 db6:	47 70       	andi	r20, 0x07	; 7
 db8:	40 5d       	subi	r20, 0xD0	; 208
 dba:	41 93       	st	Z+, r20
 dbc:	b3 e0       	ldi	r27, 0x03	; 3
 dbe:	0f d0       	rcall	.+30     	; 0xdde <__ultoa_invert+0x86>
 dc0:	c9 f7       	brne	.-14     	; 0xdb4 <__ultoa_invert+0x5c>
 dc2:	f6 cf       	rjmp	.-20     	; 0xdb0 <__ultoa_invert+0x58>
 dc4:	46 2f       	mov	r20, r22
 dc6:	4f 70       	andi	r20, 0x0F	; 15
 dc8:	40 5d       	subi	r20, 0xD0	; 208
 dca:	4a 33       	cpi	r20, 0x3A	; 58
 dcc:	18 f0       	brcs	.+6      	; 0xdd4 <__ultoa_invert+0x7c>
 dce:	49 5d       	subi	r20, 0xD9	; 217
 dd0:	31 fd       	sbrc	r19, 1
 dd2:	40 52       	subi	r20, 0x20	; 32
 dd4:	41 93       	st	Z+, r20
 dd6:	02 d0       	rcall	.+4      	; 0xddc <__ultoa_invert+0x84>
 dd8:	a9 f7       	brne	.-22     	; 0xdc4 <__ultoa_invert+0x6c>
 dda:	ea cf       	rjmp	.-44     	; 0xdb0 <__ultoa_invert+0x58>
 ddc:	b4 e0       	ldi	r27, 0x04	; 4
 dde:	a6 95       	lsr	r26
 de0:	97 95       	ror	r25
 de2:	87 95       	ror	r24
 de4:	77 95       	ror	r23
 de6:	67 95       	ror	r22
 de8:	ba 95       	dec	r27
 dea:	c9 f7       	brne	.-14     	; 0xdde <__ultoa_invert+0x86>
 dec:	00 97       	sbiw	r24, 0x00	; 0
 dee:	61 05       	cpc	r22, r1
 df0:	71 05       	cpc	r23, r1
 df2:	08 95       	ret
 df4:	9b 01       	movw	r18, r22
 df6:	ac 01       	movw	r20, r24
 df8:	0a 2e       	mov	r0, r26
 dfa:	06 94       	lsr	r0
 dfc:	57 95       	ror	r21
 dfe:	47 95       	ror	r20
 e00:	37 95       	ror	r19
 e02:	27 95       	ror	r18
 e04:	ba 95       	dec	r27
 e06:	c9 f7       	brne	.-14     	; 0xdfa <__ultoa_invert+0xa2>
 e08:	62 0f       	add	r22, r18
 e0a:	73 1f       	adc	r23, r19
 e0c:	84 1f       	adc	r24, r20
 e0e:	95 1f       	adc	r25, r21
 e10:	a0 1d       	adc	r26, r0
 e12:	08 95       	ret

00000e14 <__prologue_saves__>:
 e14:	2f 92       	push	r2
 e16:	3f 92       	push	r3
 e18:	4f 92       	push	r4
 e1a:	5f 92       	push	r5
 e1c:	6f 92       	push	r6
 e1e:	7f 92       	push	r7
 e20:	8f 92       	push	r8
 e22:	9f 92       	push	r9
 e24:	af 92       	push	r10
 e26:	bf 92       	push	r11
 e28:	cf 92       	push	r12
 e2a:	df 92       	push	r13
 e2c:	ef 92       	push	r14
 e2e:	ff 92       	push	r15
 e30:	0f 93       	push	r16
 e32:	1f 93       	push	r17
 e34:	cf 93       	push	r28
 e36:	df 93       	push	r29
 e38:	cd b7       	in	r28, 0x3d	; 61
 e3a:	de b7       	in	r29, 0x3e	; 62
 e3c:	ca 1b       	sub	r28, r26
 e3e:	db 0b       	sbc	r29, r27
 e40:	0f b6       	in	r0, 0x3f	; 63
 e42:	f8 94       	cli
 e44:	de bf       	out	0x3e, r29	; 62
 e46:	0f be       	out	0x3f, r0	; 63
 e48:	cd bf       	out	0x3d, r28	; 61
 e4a:	09 94       	ijmp

00000e4c <__epilogue_restores__>:
 e4c:	2a 88       	ldd	r2, Y+18	; 0x12
 e4e:	39 88       	ldd	r3, Y+17	; 0x11
 e50:	48 88       	ldd	r4, Y+16	; 0x10
 e52:	5f 84       	ldd	r5, Y+15	; 0x0f
 e54:	6e 84       	ldd	r6, Y+14	; 0x0e
 e56:	7d 84       	ldd	r7, Y+13	; 0x0d
 e58:	8c 84       	ldd	r8, Y+12	; 0x0c
 e5a:	9b 84       	ldd	r9, Y+11	; 0x0b
 e5c:	aa 84       	ldd	r10, Y+10	; 0x0a
 e5e:	b9 84       	ldd	r11, Y+9	; 0x09
 e60:	c8 84       	ldd	r12, Y+8	; 0x08
 e62:	df 80       	ldd	r13, Y+7	; 0x07
 e64:	ee 80       	ldd	r14, Y+6	; 0x06
 e66:	fd 80       	ldd	r15, Y+5	; 0x05
 e68:	0c 81       	ldd	r16, Y+4	; 0x04
 e6a:	1b 81       	ldd	r17, Y+3	; 0x03
 e6c:	aa 81       	ldd	r26, Y+2	; 0x02
 e6e:	b9 81       	ldd	r27, Y+1	; 0x01
 e70:	ce 0f       	add	r28, r30
 e72:	d1 1d       	adc	r29, r1
 e74:	0f b6       	in	r0, 0x3f	; 63
 e76:	f8 94       	cli
 e78:	de bf       	out	0x3e, r29	; 62
 e7a:	0f be       	out	0x3f, r0	; 63
 e7c:	cd bf       	out	0x3d, r28	; 61
 e7e:	ed 01       	movw	r28, r26
 e80:	08 95       	ret

00000e82 <_exit>:
 e82:	f8 94       	cli

00000e84 <__stop_program>:
 e84:	ff cf       	rjmp	.-2      	; 0xe84 <__stop_program>
